=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CallbackApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# callback
#
# Connector Callback API
#
# @param string $uuid Connector UUID (required)
# @param string $function_group Function Group (required)
# @param string $kind Kind (required)
# @param RequestAttributeCallback $request_attribute_callback  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Connector UUID',
        required => '1',
    },
    'function_group' => {
        data_type => 'string',
        description => 'Function Group',
        required => '1',
    },
    'kind' => {
        data_type => 'string',
        description => 'Kind',
        required => '1',
    },
    'request_attribute_callback' => {
        data_type => 'RequestAttributeCallback',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'callback' } = {
        summary => 'Connector Callback API',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub callback {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling callback");
    }

    # verify the required parameter 'function_group' is set
    unless (exists $args{'function_group'}) {
      croak("Missing the required parameter 'function_group' when calling callback");
    }

    # verify the required parameter 'kind' is set
    unless (exists $args{'kind'}) {
      croak("Missing the required parameter 'kind' when calling callback");
    }

    # verify the required parameter 'request_attribute_callback' is set
    unless (exists $args{'request_attribute_callback'}) {
      croak("Missing the required parameter 'request_attribute_callback' when calling callback");
    }

    # parse inputs
    my $_resource_path = '/v1/connectors/{uuid}/{functionGroup}/{kind}/callback';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'function_group'}) {
        my $_base_variable = "{" . "functionGroup" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'function_group'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'kind'}) {
        my $_base_variable = "{" . "kind" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'kind'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_callback'}) {
        $_body_data = $args{'request_attribute_callback'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# resource_callback
#
# Resource Callback API
#
# @param Resource $resource Name of the resource (required)
# @param string $parent_object_uuid Parent Object UUID (required)
# @param RequestAttributeCallback $request_attribute_callback  (required)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => 'Name of the resource',
        required => '1',
    },
    'parent_object_uuid' => {
        data_type => 'string',
        description => 'Parent Object UUID',
        required => '1',
    },
    'request_attribute_callback' => {
        data_type => 'RequestAttributeCallback',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'resource_callback' } = {
        summary => 'Resource Callback API',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub resource_callback {
    my ($self, %args) = @_;

    # verify the required parameter 'resource' is set
    unless (exists $args{'resource'}) {
      croak("Missing the required parameter 'resource' when calling resource_callback");
    }

    # verify the required parameter 'parent_object_uuid' is set
    unless (exists $args{'parent_object_uuid'}) {
      croak("Missing the required parameter 'parent_object_uuid' when calling resource_callback");
    }

    # verify the required parameter 'request_attribute_callback' is set
    unless (exists $args{'request_attribute_callback'}) {
      croak("Missing the required parameter 'request_attribute_callback' when calling resource_callback");
    }

    # parse inputs
    my $_resource_path = '/v1/{resource}/{parentObjectUuid}/callback';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'resource'}) {
        my $_base_variable = "{" . "resource" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'parent_object_uuid'}) {
        my $_base_variable = "{" . "parentObjectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'parent_object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_callback'}) {
        $_body_data = $args{'request_attribute_callback'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
