=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::AuditLogApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# export_audit_logs
#
# Export Audit logs
#
# @param ARRAY[SearchFilterRequestDto] $search_filter_request_dto  (required)
{
    my $params = {
    'search_filter_request_dto' => {
        data_type => 'ARRAY[SearchFilterRequestDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'export_audit_logs' } = {
        summary => 'Export Audit logs',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub export_audit_logs {
    my ($self, %args) = @_;

    # verify the required parameter 'search_filter_request_dto' is set
    unless (exists $args{'search_filter_request_dto'}) {
      croak("Missing the required parameter 'search_filter_request_dto' when calling export_audit_logs");
    }

    # parse inputs
    my $_resource_path = '/v1/auditLogs/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_filter_request_dto'}) {
        $_body_data = $args{'search_filter_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_searchable_field_information5
#
# Get Audit logs searchable fields information
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_searchable_field_information5' } = {
        summary => 'Get Audit logs searchable fields information',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub get_searchable_field_information5 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/auditLogs/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# list_audit_logs
#
# List Audit logs
#
# @param SearchRequestDto $search_request_dto  (required)
{
    my $params = {
    'search_request_dto' => {
        data_type => 'SearchRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_audit_logs' } = {
        summary => 'List Audit logs',
        params => $params,
        returns => 'AuditLogResponseDto',
        };
}
# @return AuditLogResponseDto
#
sub list_audit_logs {
    my ($self, %args) = @_;

    # verify the required parameter 'search_request_dto' is set
    unless (exists $args{'search_request_dto'}) {
      croak("Missing the required parameter 'search_request_dto' when calling list_audit_logs");
    }

    # parse inputs
    my $_resource_path = '/v1/auditLogs';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_request_dto'}) {
        $_body_data = $args{'search_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AuditLogResponseDto', $response);
    return $_response_object;
}

#
# purge_audit_logs
#
# Purge Audit logs
#
# @param ARRAY[SearchFilterRequestDto] $search_filter_request_dto  (required)
{
    my $params = {
    'search_filter_request_dto' => {
        data_type => 'ARRAY[SearchFilterRequestDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'purge_audit_logs' } = {
        summary => 'Purge Audit logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub purge_audit_logs {
    my ($self, %args) = @_;

    # verify the required parameter 'search_filter_request_dto' is set
    unless (exists $args{'search_filter_request_dto'}) {
      croak("Missing the required parameter 'search_filter_request_dto' when calling purge_audit_logs");
    }

    # parse inputs
    my $_resource_path = '/v1/auditLogs/purge';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_filter_request_dto'}) {
        $_body_data = $args{'search_filter_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
