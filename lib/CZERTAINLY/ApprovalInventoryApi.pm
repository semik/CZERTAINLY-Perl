=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::ApprovalInventoryApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# approve_approval
#
# Approving of the Approval
#
# @param string $uuid Approval UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'approve_approval' } = {
        summary => 'Approving of the Approval',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub approve_approval {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling approve_approval");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/{uuid}/approve';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# approve_approval_recipient
#
# Approving of Recipient of the Approval
#
# @param string $uuid Approval UUID (required)
# @param UserApprovalDto $user_approval_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval UUID',
        required => '1',
    },
    'user_approval_dto' => {
        data_type => 'UserApprovalDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'approve_approval_recipient' } = {
        summary => 'Approving of Recipient of the Approval',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub approve_approval_recipient {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling approve_approval_recipient");
    }

    # verify the required parameter 'user_approval_dto' is set
    unless (exists $args{'user_approval_dto'}) {
      croak("Missing the required parameter 'user_approval_dto' when calling approve_approval_recipient");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/{uuid}/approveRecipient';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'user_approval_dto'}) {
        $_body_data = $args{'user_approval_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_approval
#
# Get Approval Detail
#
# @param string $uuid Approval UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_approval' } = {
        summary => 'Get Approval Detail',
        params => $params,
        returns => 'ApprovalDetailDto',
        };
}
# @return ApprovalDetailDto
#
sub get_approval {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_approval");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalDetailDto', $response);
    return $_response_object;
}

#
# list_approvals
#
# List of Approvals
#
# @param PaginationRequestDto $pagination_request_dto  (required)
{
    my $params = {
    'pagination_request_dto' => {
        data_type => 'PaginationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_approvals' } = {
        summary => 'List of Approvals',
        params => $params,
        returns => 'ApprovalResponseDto',
        };
}
# @return ApprovalResponseDto
#
sub list_approvals {
    my ($self, %args) = @_;

    # verify the required parameter 'pagination_request_dto' is set
    unless (exists $args{'pagination_request_dto'}) {
      croak("Missing the required parameter 'pagination_request_dto' when calling list_approvals");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pagination_request_dto'}) {
        $query_params->{'paginationRequestDto'} = $self->{api_client}->to_query_value($args{'pagination_request_dto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalResponseDto', $response);
    return $_response_object;
}

#
# list_user_approvals
#
# List of User's Approvals
#
# @param PaginationRequestDto $pagination_request_dto  (required)
# @param ApprovalUserDto $approval_user_dto Select if you want to list all history of approvals by user (required)
{
    my $params = {
    'pagination_request_dto' => {
        data_type => 'PaginationRequestDto',
        description => '',
        required => '1',
    },
    'approval_user_dto' => {
        data_type => 'ApprovalUserDto',
        description => 'Select if you want to list all history of approvals by user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_user_approvals' } = {
        summary => 'List of User&#39;s Approvals',
        params => $params,
        returns => 'ApprovalResponseDto',
        };
}
# @return ApprovalResponseDto
#
sub list_user_approvals {
    my ($self, %args) = @_;

    # verify the required parameter 'pagination_request_dto' is set
    unless (exists $args{'pagination_request_dto'}) {
      croak("Missing the required parameter 'pagination_request_dto' when calling list_user_approvals");
    }

    # verify the required parameter 'approval_user_dto' is set
    unless (exists $args{'approval_user_dto'}) {
      croak("Missing the required parameter 'approval_user_dto' when calling list_user_approvals");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pagination_request_dto'}) {
        $query_params->{'paginationRequestDto'} = $self->{api_client}->to_query_value($args{'pagination_request_dto'});
    }

    # query params
    if ( exists $args{'approval_user_dto'}) {
        $query_params->{'approvalUserDto'} = $self->{api_client}->to_query_value($args{'approval_user_dto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalResponseDto', $response);
    return $_response_object;
}

#
# reject_approval
#
# Rejecting of the Approval
#
# @param string $uuid Approval UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reject_approval' } = {
        summary => 'Rejecting of the Approval',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reject_approval {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling reject_approval");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/{uuid}/reject';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# reject_approval_recipient
#
# Rejecting of Recipient of the Approval
#
# @param string $uuid Approval UUID (required)
# @param UserApprovalDto $user_approval_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval UUID',
        required => '1',
    },
    'user_approval_dto' => {
        data_type => 'UserApprovalDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reject_approval_recipient' } = {
        summary => 'Rejecting of Recipient of the Approval',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reject_approval_recipient {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling reject_approval_recipient");
    }

    # verify the required parameter 'user_approval_dto' is set
    unless (exists $args{'user_approval_dto'}) {
      croak("Missing the required parameter 'user_approval_dto' when calling reject_approval_recipient");
    }

    # parse inputs
    my $_resource_path = '/v1/approvals/{uuid}/rejectRecipient';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'user_approval_dto'}) {
        $_body_data = $args{'user_approval_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
