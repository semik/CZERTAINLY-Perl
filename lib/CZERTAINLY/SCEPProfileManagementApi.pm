=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::SCEPProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_scep_profile
#
# Delete multiple SCEP Profiles
#
# @param ARRAY[string] $request_body SCEP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'SCEP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_scep_profile' } = {
        summary => 'Delete multiple SCEP Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub bulk_delete_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/delete';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# bulk_disable_scep_profile
#
# Disable multiple SCEP Profile
#
# @param ARRAY[string] $request_body SCEP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'SCEP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_disable_scep_profile' } = {
        summary => 'Disable multiple SCEP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_disable_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_disable_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_enable_scep_profile
#
# Enable multiple SCEP Profiles
#
# @param ARRAY[string] $request_body SCEP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'SCEP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_enable_scep_profile' } = {
        summary => 'Enable multiple SCEP Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_enable_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_enable_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_scep_profile
#
# Create SCEP Profile
#
# @param ScepProfileRequestDto $scep_profile_request_dto  (required)
{
    my $params = {
    'scep_profile_request_dto' => {
        data_type => 'ScepProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_scep_profile' } = {
        summary => 'Create SCEP Profile',
        params => $params,
        returns => 'ScepProfileDetailDto',
        };
}
# @return ScepProfileDetailDto
#
sub create_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'scep_profile_request_dto' is set
    unless (exists $args{'scep_profile_request_dto'}) {
      croak("Missing the required parameter 'scep_profile_request_dto' when calling create_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'scep_profile_request_dto'}) {
        $_body_data = $args{'scep_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScepProfileDetailDto', $response);
    return $_response_object;
}

#
# delete_scep_profile
#
# Delete SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_scep_profile' } = {
        summary => 'Delete SCEP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_scep_profile
#
# Disable SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_scep_profile' } = {
        summary => 'Disable SCEP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_scep_profile
#
# Edit SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
# @param ScepProfileEditRequestDto $scep_profile_edit_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    'scep_profile_edit_request_dto' => {
        data_type => 'ScepProfileEditRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_scep_profile' } = {
        summary => 'Edit SCEP Profile',
        params => $params,
        returns => 'ScepProfileDetailDto',
        };
}
# @return ScepProfileDetailDto
#
sub edit_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_scep_profile");
    }

    # verify the required parameter 'scep_profile_edit_request_dto' is set
    unless (exists $args{'scep_profile_edit_request_dto'}) {
      croak("Missing the required parameter 'scep_profile_edit_request_dto' when calling edit_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'scep_profile_edit_request_dto'}) {
        $_body_data = $args{'scep_profile_edit_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScepProfileDetailDto', $response);
    return $_response_object;
}

#
# enable_scep_profile
#
# Enable SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_scep_profile' } = {
        summary => 'Enable SCEP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# force_delete_scep_profiles
#
# Force delete multiple SCEP Profiles
#
# @param ARRAY[string] $request_body SCEP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'SCEP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'force_delete_scep_profiles' } = {
        summary => 'Force delete multiple SCEP Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub force_delete_scep_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling force_delete_scep_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/delete/force';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# get_scep_profile
#
# Get details of SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scep_profile' } = {
        summary => 'Get details of SCEP Profile',
        params => $params,
        returns => 'ScepProfileDetailDto',
        };
}
# @return ScepProfileDetailDto
#
sub get_scep_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_scep_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScepProfileDetailDto', $response);
    return $_response_object;
}

#
# list_scep_ca_certificates
#
# Get list of certificates eligible for CA certificate of SCEP requests
#
# @param boolean $intune_enabled flag to return certificates that are eligible for Intune integration (required)
{
    my $params = {
    'intune_enabled' => {
        data_type => 'boolean',
        description => 'flag to return certificates that are eligible for Intune integration',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_scep_ca_certificates' } = {
        summary => 'Get list of certificates eligible for CA certificate of SCEP requests',
        params => $params,
        returns => 'ARRAY[CertificateDto]',
        };
}
# @return ARRAY[CertificateDto]
#
sub list_scep_ca_certificates {
    my ($self, %args) = @_;

    # verify the required parameter 'intune_enabled' is set
    unless (exists $args{'intune_enabled'}) {
      croak("Missing the required parameter 'intune_enabled' when calling list_scep_ca_certificates");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/caCertificates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'intune_enabled'}) {
        $query_params->{'intuneEnabled'} = $self->{api_client}->to_query_value($args{'intune_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CertificateDto]', $response);
    return $_response_object;
}

#
# list_scep_profiles
#
# Get list of SCEP Profiles
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_scep_profiles' } = {
        summary => 'Get list of SCEP Profiles',
        params => $params,
        returns => 'ARRAY[ScepProfileDto]',
        };
}
# @return ARRAY[ScepProfileDto]
#
sub list_scep_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/scepProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ScepProfileDto]', $response);
    return $_response_object;
}

#
# update_ra_profile
#
# Update RA Profile for SCEP Profile
#
# @param string $uuid SCEP Profile UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_ra_profile' } = {
        summary => 'Update RA Profile for SCEP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling update_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/scepProfiles/{uuid}/raProfiles/{raProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
