=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ConnectorAuthenticationApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_api_key_auth_attributes
#
# Get API Key auth Attributes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_api_key_auth_attributes' } = {
        summary => 'Get API Key auth Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub get_api_key_auth_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/apiKey';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# get_authentication_types
#
# Get list of Authentication Types
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_authentication_types' } = {
        summary => 'Get list of Authentication Types',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_authentication_types {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/types';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_basic_auth_attributes
#
# Get basic auth Attributes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_basic_auth_attributes' } = {
        summary => 'Get basic auth Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub get_basic_auth_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/basic';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# get_certificate_attributes
#
# Get Attributes for certificate auth
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_certificate_attributes' } = {
        summary => 'Get Attributes for certificate auth',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub get_certificate_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/certificate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# get_jwt_auth_attributes
#
# Get JWT auth Attributes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_jwt_auth_attributes' } = {
        summary => 'Get JWT auth Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub get_jwt_auth_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/jwt';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# validate_api_key_auth_attributes
#
# Validate API Key Attributes
#
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_api_key_auth_attributes' } = {
        summary => 'Validate API Key Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_api_key_auth_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_api_key_auth_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/apiKey/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate_basic_auth_attributes
#
# Validate basic auth Attributes
#
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_basic_auth_attributes' } = {
        summary => 'Validate basic auth Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_basic_auth_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_basic_auth_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/basic/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate_certificate_attributes
#
# Validate certificate auth Attributes
#
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_certificate_attributes' } = {
        summary => 'Validate certificate auth Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/certificate/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate_jwt_auth_attributes
#
# Validate JWT auth Attributes
#
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_jwt_auth_attributes' } = {
        summary => 'Validate JWT auth Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_jwt_auth_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_jwt_auth_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/connectors/auth/attributes/jwt/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
