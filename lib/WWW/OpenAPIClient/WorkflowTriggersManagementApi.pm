=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::WorkflowTriggersManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_trigger
#
# Create Trigger
#
# @param TriggerRequestDto $trigger_request_dto  (required)
{
    my $params = {
    'trigger_request_dto' => {
        data_type => 'TriggerRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_trigger' } = {
        summary => 'Create Trigger',
        params => $params,
        returns => 'TriggerDetailDto',
        };
}
# @return TriggerDetailDto
#
sub create_trigger {
    my ($self, %args) = @_;

    # verify the required parameter 'trigger_request_dto' is set
    unless (exists $args{'trigger_request_dto'}) {
      croak("Missing the required parameter 'trigger_request_dto' when calling create_trigger");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'trigger_request_dto'}) {
        $_body_data = $args{'trigger_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TriggerDetailDto', $response);
    return $_response_object;
}

#
# delete_trigger
#
# Delete Trigger
#
# @param string $trigger_uuid Trigger UUID (required)
{
    my $params = {
    'trigger_uuid' => {
        data_type => 'string',
        description => 'Trigger UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_trigger' } = {
        summary => 'Delete Trigger',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_trigger {
    my ($self, %args) = @_;

    # verify the required parameter 'trigger_uuid' is set
    unless (exists $args{'trigger_uuid'}) {
      croak("Missing the required parameter 'trigger_uuid' when calling delete_trigger");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers/{triggerUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'trigger_uuid'}) {
        my $_base_variable = "{" . "triggerUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'trigger_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_trigger
#
# Get Trigger details
#
# @param string $trigger_uuid Trigger UUID (required)
{
    my $params = {
    'trigger_uuid' => {
        data_type => 'string',
        description => 'Trigger UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_trigger' } = {
        summary => 'Get Trigger details',
        params => $params,
        returns => 'TriggerDetailDto',
        };
}
# @return TriggerDetailDto
#
sub get_trigger {
    my ($self, %args) = @_;

    # verify the required parameter 'trigger_uuid' is set
    unless (exists $args{'trigger_uuid'}) {
      croak("Missing the required parameter 'trigger_uuid' when calling get_trigger");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers/{triggerUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'trigger_uuid'}) {
        my $_base_variable = "{" . "triggerUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'trigger_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TriggerDetailDto', $response);
    return $_response_object;
}

#
# get_trigger_history
#
# Get Trigger History
#
# @param string $trigger_uuid Trigger UUID (required)
# @param string $association_object_uuid Trigger Association Object UUID (required)
{
    my $params = {
    'trigger_uuid' => {
        data_type => 'string',
        description => 'Trigger UUID',
        required => '1',
    },
    'association_object_uuid' => {
        data_type => 'string',
        description => 'Trigger Association Object UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_trigger_history' } = {
        summary => 'Get Trigger History',
        params => $params,
        returns => 'ARRAY[TriggerHistoryDto]',
        };
}
# @return ARRAY[TriggerHistoryDto]
#
sub get_trigger_history {
    my ($self, %args) = @_;

    # verify the required parameter 'trigger_uuid' is set
    unless (exists $args{'trigger_uuid'}) {
      croak("Missing the required parameter 'trigger_uuid' when calling get_trigger_history");
    }

    # verify the required parameter 'association_object_uuid' is set
    unless (exists $args{'association_object_uuid'}) {
      croak("Missing the required parameter 'association_object_uuid' when calling get_trigger_history");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers/{triggerUuid}/history/{associationObjectUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'trigger_uuid'}) {
        my $_base_variable = "{" . "triggerUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'trigger_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'association_object_uuid'}) {
        my $_base_variable = "{" . "associationObjectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'association_object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TriggerHistoryDto]', $response);
    return $_response_object;
}

#
# get_trigger_history_summary
#
# Get Trigger History Summary
#
# @param string $association_object_uuid Trigger Association Object UUID (required)
{
    my $params = {
    'association_object_uuid' => {
        data_type => 'string',
        description => 'Trigger Association Object UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_trigger_history_summary' } = {
        summary => 'Get Trigger History Summary',
        params => $params,
        returns => 'TriggerHistorySummaryDto',
        };
}
# @return TriggerHistorySummaryDto
#
sub get_trigger_history_summary {
    my ($self, %args) = @_;

    # verify the required parameter 'association_object_uuid' is set
    unless (exists $args{'association_object_uuid'}) {
      croak("Missing the required parameter 'association_object_uuid' when calling get_trigger_history_summary");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers/history/{associationObjectUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'association_object_uuid'}) {
        my $_base_variable = "{" . "associationObjectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'association_object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TriggerHistorySummaryDto', $response);
    return $_response_object;
}

#
# list_triggers
#
# List Triggers
#
# @param Resource $resource  (optional)
# @param Resource $event_resource  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    'event_resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_triggers' } = {
        summary => 'List Triggers',
        params => $params,
        returns => 'ARRAY[TriggerDto]',
        };
}
# @return ARRAY[TriggerDto]
#
sub list_triggers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    # query params
    if ( exists $args{'event_resource'}) {
        $query_params->{'eventResource'} = $self->{api_client}->to_query_value($args{'event_resource'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TriggerDto]', $response);
    return $_response_object;
}

#
# update_trigger
#
# Update Trigger
#
# @param string $trigger_uuid Trigger UUID (required)
# @param UpdateTriggerRequestDto $update_trigger_request_dto  (required)
{
    my $params = {
    'trigger_uuid' => {
        data_type => 'string',
        description => 'Trigger UUID',
        required => '1',
    },
    'update_trigger_request_dto' => {
        data_type => 'UpdateTriggerRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_trigger' } = {
        summary => 'Update Trigger',
        params => $params,
        returns => 'TriggerDetailDto',
        };
}
# @return TriggerDetailDto
#
sub update_trigger {
    my ($self, %args) = @_;

    # verify the required parameter 'trigger_uuid' is set
    unless (exists $args{'trigger_uuid'}) {
      croak("Missing the required parameter 'trigger_uuid' when calling update_trigger");
    }

    # verify the required parameter 'update_trigger_request_dto' is set
    unless (exists $args{'update_trigger_request_dto'}) {
      croak("Missing the required parameter 'update_trigger_request_dto' when calling update_trigger");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/triggers/{triggerUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'trigger_uuid'}) {
        my $_base_variable = "{" . "triggerUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'trigger_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_trigger_request_dto'}) {
        $_body_data = $args{'update_trigger_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TriggerDetailDto', $response);
    return $_response_object;
}

1;
