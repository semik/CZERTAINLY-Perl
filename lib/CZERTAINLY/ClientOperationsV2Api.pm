=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::ClientOperationsV2Api;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# issue_certificate
#
# Issue Certificate
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param ClientCertificateSignRequestDto $client_certificate_sign_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'client_certificate_sign_request_dto' => {
        data_type => 'ClientCertificateSignRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'issue_certificate' } = {
        summary => 'Issue Certificate',
        params => $params,
        returns => 'ClientCertificateDataResponseDto',
        };
}
# @return ClientCertificateDataResponseDto
#
sub issue_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling issue_certificate");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling issue_certificate");
    }

    # verify the required parameter 'client_certificate_sign_request_dto' is set
    unless (exists $args{'client_certificate_sign_request_dto'}) {
      croak("Missing the required parameter 'client_certificate_sign_request_dto' when calling issue_certificate");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_certificate_sign_request_dto'}) {
        $_body_data = $args{'client_certificate_sign_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientCertificateDataResponseDto', $response);
    return $_response_object;
}

#
# issue_requested_certificate
#
# Issue existing certificate with status Requested
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'issue_requested_certificate' } = {
        summary => 'Issue existing certificate with status Requested',
        params => $params,
        returns => 'ClientCertificateDataResponseDto',
        };
}
# @return ClientCertificateDataResponseDto
#
sub issue_requested_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling issue_requested_certificate");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling issue_requested_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling issue_requested_certificate");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/issue';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientCertificateDataResponseDto', $response);
    return $_response_object;
}

#
# list_issue_certificate_attributes
#
# Get issue Certificate Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_issue_certificate_attributes' } = {
        summary => 'Get issue Certificate Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_issue_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling list_issue_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling list_issue_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_revoke_certificate_attributes
#
# Get revocation Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_revoke_certificate_attributes' } = {
        summary => 'Get revocation Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_revoke_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling list_revoke_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling list_revoke_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# rekey_certificate
#
# Rekey Certificate
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
# @param ClientCertificateRekeyRequestDto $client_certificate_rekey_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'client_certificate_rekey_request_dto' => {
        data_type => 'ClientCertificateRekeyRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'rekey_certificate' } = {
        summary => 'Rekey Certificate',
        params => $params,
        returns => 'ClientCertificateDataResponseDto',
        };
}
# @return ClientCertificateDataResponseDto
#
sub rekey_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling rekey_certificate");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling rekey_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling rekey_certificate");
    }

    # verify the required parameter 'client_certificate_rekey_request_dto' is set
    unless (exists $args{'client_certificate_rekey_request_dto'}) {
      croak("Missing the required parameter 'client_certificate_rekey_request_dto' when calling rekey_certificate");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/rekey';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_certificate_rekey_request_dto'}) {
        $_body_data = $args{'client_certificate_rekey_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientCertificateDataResponseDto', $response);
    return $_response_object;
}

#
# renew_certificate
#
# Renew Certificate
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
# @param ClientCertificateRenewRequestDto $client_certificate_renew_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'client_certificate_renew_request_dto' => {
        data_type => 'ClientCertificateRenewRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'renew_certificate' } = {
        summary => 'Renew Certificate',
        params => $params,
        returns => 'ClientCertificateDataResponseDto',
        };
}
# @return ClientCertificateDataResponseDto
#
sub renew_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling renew_certificate");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling renew_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling renew_certificate");
    }

    # verify the required parameter 'client_certificate_renew_request_dto' is set
    unless (exists $args{'client_certificate_renew_request_dto'}) {
      croak("Missing the required parameter 'client_certificate_renew_request_dto' when calling renew_certificate");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/renew';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_certificate_renew_request_dto'}) {
        $_body_data = $args{'client_certificate_renew_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientCertificateDataResponseDto', $response);
    return $_response_object;
}

#
# revoke_certificate
#
# Revoke Certificate
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
# @param ClientCertificateRevocationDto $client_certificate_revocation_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'client_certificate_revocation_dto' => {
        data_type => 'ClientCertificateRevocationDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'revoke_certificate' } = {
        summary => 'Revoke Certificate',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub revoke_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling revoke_certificate");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling revoke_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling revoke_certificate");
    }

    # verify the required parameter 'client_certificate_revocation_dto' is set
    unless (exists $args{'client_certificate_revocation_dto'}) {
      croak("Missing the required parameter 'client_certificate_revocation_dto' when calling revoke_certificate");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/revoke';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_certificate_revocation_dto'}) {
        $_body_data = $args{'client_certificate_revocation_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate_issue_certificate_attributes
#
# Validate issue Certificate Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_issue_certificate_attributes' } = {
        summary => 'Validate issue Certificate Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_issue_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling validate_issue_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling validate_issue_certificate_attributes");
    }

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_issue_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate_revoke_certificate_attributes
#
# Validate revocation Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate_revoke_certificate_attributes' } = {
        summary => 'Validate revocation Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_revoke_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling validate_revoke_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling validate_revoke_certificate_attributes");
    }

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling validate_revoke_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
