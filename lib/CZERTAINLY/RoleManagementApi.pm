=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::RoleManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_resource_permission_objects
#
# Add Resource Objects to a Role
#
# @param string $role_uuid Role UUID (required)
# @param string $resource_uuid Resource UUID (required)
# @param ARRAY[ObjectPermissionsRequestDto] $object_permissions_request_dto  (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'resource_uuid' => {
        data_type => 'string',
        description => 'Resource UUID',
        required => '1',
    },
    'object_permissions_request_dto' => {
        data_type => 'ARRAY[ObjectPermissionsRequestDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_resource_permission_objects' } = {
        summary => 'Add Resource Objects to a Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_resource_permission_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling add_resource_permission_objects");
    }

    # verify the required parameter 'resource_uuid' is set
    unless (exists $args{'resource_uuid'}) {
      croak("Missing the required parameter 'resource_uuid' when calling add_resource_permission_objects");
    }

    # verify the required parameter 'object_permissions_request_dto' is set
    unless (exists $args{'object_permissions_request_dto'}) {
      croak("Missing the required parameter 'object_permissions_request_dto' when calling add_resource_permission_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions/{resourceUuid}/objects';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'resource_uuid'}) {
        my $_base_variable = "{" . "resourceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'object_permissions_request_dto'}) {
        $_body_data = $args{'object_permissions_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_role
#
# Create Role
#
# @param RoleRequestDto $role_request_dto  (required)
{
    my $params = {
    'role_request_dto' => {
        data_type => 'RoleRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_role' } = {
        summary => 'Create Role',
        params => $params,
        returns => 'RoleDetailDto',
        };
}
# @return RoleDetailDto
#
sub create_role {
    my ($self, %args) = @_;

    # verify the required parameter 'role_request_dto' is set
    unless (exists $args{'role_request_dto'}) {
      croak("Missing the required parameter 'role_request_dto' when calling create_role");
    }

    # parse inputs
    my $_resource_path = '/v1/roles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'role_request_dto'}) {
        $_body_data = $args{'role_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleDetailDto', $response);
    return $_response_object;
}

#
# delete_role
#
# Delete Role
#
# @param string $role_uuid Role UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_role' } = {
        summary => 'Delete Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_role {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling delete_role");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_resource_permission_objects
#
# Get Resource Objects of a Role
#
# @param string $role_uuid Role UUID (required)
# @param string $resource_uuid Resource UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'resource_uuid' => {
        data_type => 'string',
        description => 'Resource UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_resource_permission_objects' } = {
        summary => 'Get Resource Objects of a Role',
        params => $params,
        returns => 'ARRAY[ObjectPermissionsDto]',
        };
}
# @return ARRAY[ObjectPermissionsDto]
#
sub get_resource_permission_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling get_resource_permission_objects");
    }

    # verify the required parameter 'resource_uuid' is set
    unless (exists $args{'resource_uuid'}) {
      croak("Missing the required parameter 'resource_uuid' when calling get_resource_permission_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions/{resourceUuid}/objects';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'resource_uuid'}) {
        my $_base_variable = "{" . "resourceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ObjectPermissionsDto]', $response);
    return $_response_object;
}

#
# get_role
#
# Get role details
#
# @param string $role_uuid Role UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_role' } = {
        summary => 'Get role details',
        params => $params,
        returns => 'RoleDetailDto',
        };
}
# @return RoleDetailDto
#
sub get_role {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling get_role");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleDetailDto', $response);
    return $_response_object;
}

#
# get_role_permissions
#
# Get Permissions of a Role
#
# @param string $role_uuid Role UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_role_permissions' } = {
        summary => 'Get Permissions of a Role',
        params => $params,
        returns => 'SubjectPermissionsDto',
        };
}
# @return SubjectPermissionsDto
#
sub get_role_permissions {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling get_role_permissions");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubjectPermissionsDto', $response);
    return $_response_object;
}

#
# get_role_resource_permissions
#
# Get Resources of a Role
#
# @param string $role_uuid Role UUID (required)
# @param string $resource_uuid Resource UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'resource_uuid' => {
        data_type => 'string',
        description => 'Resource UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_role_resource_permissions' } = {
        summary => 'Get Resources of a Role',
        params => $params,
        returns => 'ResourcePermissionsDto',
        };
}
# @return ResourcePermissionsDto
#
sub get_role_resource_permissions {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling get_role_resource_permissions");
    }

    # verify the required parameter 'resource_uuid' is set
    unless (exists $args{'resource_uuid'}) {
      croak("Missing the required parameter 'resource_uuid' when calling get_role_resource_permissions");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions/{resourceUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'resource_uuid'}) {
        my $_base_variable = "{" . "resourceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourcePermissionsDto', $response);
    return $_response_object;
}

#
# get_role_users
#
# Get Role Users
#
# @param string $role_uuid Role UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_role_users' } = {
        summary => 'Get Role Users',
        params => $params,
        returns => 'ARRAY[UserDto]',
        };
}
# @return ARRAY[UserDto]
#
sub get_role_users {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling get_role_users");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/users';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UserDto]', $response);
    return $_response_object;
}

#
# list_roles
#
# List Roles
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_roles' } = {
        summary => 'List Roles',
        params => $params,
        returns => 'ARRAY[RoleDto]',
        };
}
# @return ARRAY[RoleDto]
#
sub list_roles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RoleDto]', $response);
    return $_response_object;
}

#
# remove_resource_permission_objects
#
# Update Resource Objects to a Role
#
# @param string $role_uuid Role UUID (required)
# @param string $resource_uuid Resource UUID (required)
# @param string $object_uuid Object UUID (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'resource_uuid' => {
        data_type => 'string',
        description => 'Resource UUID',
        required => '1',
    },
    'object_uuid' => {
        data_type => 'string',
        description => 'Object UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_resource_permission_objects' } = {
        summary => 'Update Resource Objects to a Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_resource_permission_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling remove_resource_permission_objects");
    }

    # verify the required parameter 'resource_uuid' is set
    unless (exists $args{'resource_uuid'}) {
      croak("Missing the required parameter 'resource_uuid' when calling remove_resource_permission_objects");
    }

    # verify the required parameter 'object_uuid' is set
    unless (exists $args{'object_uuid'}) {
      croak("Missing the required parameter 'object_uuid' when calling remove_resource_permission_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions/{resourceUuid}/objects/{objectUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'resource_uuid'}) {
        my $_base_variable = "{" . "resourceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_uuid'}) {
        my $_base_variable = "{" . "objectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# save_permissions
#
# Add permissions to Role
#
# @param string $role_uuid Role UUID (required)
# @param RolePermissionsRequestDto $role_permissions_request_dto  (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'role_permissions_request_dto' => {
        data_type => 'RolePermissionsRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'save_permissions' } = {
        summary => 'Add permissions to Role',
        params => $params,
        returns => 'SubjectPermissionsDto',
        };
}
# @return SubjectPermissionsDto
#
sub save_permissions {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling save_permissions");
    }

    # verify the required parameter 'role_permissions_request_dto' is set
    unless (exists $args{'role_permissions_request_dto'}) {
      croak("Missing the required parameter 'role_permissions_request_dto' when calling save_permissions");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'role_permissions_request_dto'}) {
        $_body_data = $args{'role_permissions_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubjectPermissionsDto', $response);
    return $_response_object;
}

#
# update_resource_permission_objects
#
# Update Resource Objects to a Role
#
# @param string $role_uuid Role UUID (required)
# @param string $resource_uuid Resource UUID (required)
# @param string $object_uuid Object UUID (required)
# @param ObjectPermissionsRequestDto $object_permissions_request_dto  (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'resource_uuid' => {
        data_type => 'string',
        description => 'Resource UUID',
        required => '1',
    },
    'object_uuid' => {
        data_type => 'string',
        description => 'Object UUID',
        required => '1',
    },
    'object_permissions_request_dto' => {
        data_type => 'ObjectPermissionsRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_resource_permission_objects' } = {
        summary => 'Update Resource Objects to a Role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_resource_permission_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling update_resource_permission_objects");
    }

    # verify the required parameter 'resource_uuid' is set
    unless (exists $args{'resource_uuid'}) {
      croak("Missing the required parameter 'resource_uuid' when calling update_resource_permission_objects");
    }

    # verify the required parameter 'object_uuid' is set
    unless (exists $args{'object_uuid'}) {
      croak("Missing the required parameter 'object_uuid' when calling update_resource_permission_objects");
    }

    # verify the required parameter 'object_permissions_request_dto' is set
    unless (exists $args{'object_permissions_request_dto'}) {
      croak("Missing the required parameter 'object_permissions_request_dto' when calling update_resource_permission_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/permissions/{resourceUuid}/objects/{objectUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'resource_uuid'}) {
        my $_base_variable = "{" . "resourceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_uuid'}) {
        my $_base_variable = "{" . "objectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'object_permissions_request_dto'}) {
        $_body_data = $args{'object_permissions_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_role
#
# Update Role
#
# @param string $role_uuid Role UUID (required)
# @param RoleRequestDto $role_request_dto  (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'role_request_dto' => {
        data_type => 'RoleRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_role' } = {
        summary => 'Update Role',
        params => $params,
        returns => 'RoleDetailDto',
        };
}
# @return RoleDetailDto
#
sub update_role {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling update_role");
    }

    # verify the required parameter 'role_request_dto' is set
    unless (exists $args{'role_request_dto'}) {
      croak("Missing the required parameter 'role_request_dto' when calling update_role");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'role_request_dto'}) {
        $_body_data = $args{'role_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleDetailDto', $response);
    return $_response_object;
}

#
# update_users
#
# Add users to Role
#
# @param string $role_uuid Role UUID (required)
# @param ARRAY[string] $request_body User UUIDs (required)
{
    my $params = {
    'role_uuid' => {
        data_type => 'string',
        description => 'Role UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'User UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_users' } = {
        summary => 'Add users to Role',
        params => $params,
        returns => 'RoleDetailDto',
        };
}
# @return RoleDetailDto
#
sub update_users {
    my ($self, %args) = @_;

    # verify the required parameter 'role_uuid' is set
    unless (exists $args{'role_uuid'}) {
      croak("Missing the required parameter 'role_uuid' when calling update_users");
    }

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling update_users");
    }

    # parse inputs
    my $_resource_path = '/v1/roles/{roleUuid}/users';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role_uuid'}) {
        my $_base_variable = "{" . "roleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleDetailDto', $response);
    return $_response_object;
}

1;
