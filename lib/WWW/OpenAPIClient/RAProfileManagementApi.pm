=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::RAProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# activate_acme_for_ra_profile
#
# Activate ACME for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $acme_profile_uuid ACME Profile UUID (required)
# @param ActivateAcmeForRaProfileRequestDto $activate_acme_for_ra_profile_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'acme_profile_uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    'activate_acme_for_ra_profile_request_dto' => {
        data_type => 'ActivateAcmeForRaProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'activate_acme_for_ra_profile' } = {
        summary => 'Activate ACME for RA Profile',
        params => $params,
        returns => 'RaProfileAcmeDetailResponseDto',
        };
}
# @return RaProfileAcmeDetailResponseDto
#
sub activate_acme_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling activate_acme_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling activate_acme_for_ra_profile");
    }

    # verify the required parameter 'acme_profile_uuid' is set
    unless (exists $args{'acme_profile_uuid'}) {
      croak("Missing the required parameter 'acme_profile_uuid' when calling activate_acme_for_ra_profile");
    }

    # verify the required parameter 'activate_acme_for_ra_profile_request_dto' is set
    unless (exists $args{'activate_acme_for_ra_profile_request_dto'}) {
      croak("Missing the required parameter 'activate_acme_for_ra_profile_request_dto' when calling activate_acme_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme/activate/{acmeProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'acme_profile_uuid'}) {
        my $_base_variable = "{" . "acmeProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'acme_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activate_acme_for_ra_profile_request_dto'}) {
        $_body_data = $args{'activate_acme_for_ra_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileAcmeDetailResponseDto', $response);
    return $_response_object;
}

#
# activate_cmp_for_ra_profile
#
# Activate CMP for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $cmp_profile_uuid CMP Profile UUID (required)
# @param ActivateCmpForRaProfileRequestDto $activate_cmp_for_ra_profile_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    'activate_cmp_for_ra_profile_request_dto' => {
        data_type => 'ActivateCmpForRaProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'activate_cmp_for_ra_profile' } = {
        summary => 'Activate CMP for RA Profile',
        params => $params,
        returns => 'RaProfileCmpDetailResponseDto',
        };
}
# @return RaProfileCmpDetailResponseDto
#
sub activate_cmp_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling activate_cmp_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling activate_cmp_for_ra_profile");
    }

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling activate_cmp_for_ra_profile");
    }

    # verify the required parameter 'activate_cmp_for_ra_profile_request_dto' is set
    unless (exists $args{'activate_cmp_for_ra_profile_request_dto'}) {
      croak("Missing the required parameter 'activate_cmp_for_ra_profile_request_dto' when calling activate_cmp_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp/activate/{cmpProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activate_cmp_for_ra_profile_request_dto'}) {
        $_body_data = $args{'activate_cmp_for_ra_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileCmpDetailResponseDto', $response);
    return $_response_object;
}

#
# activate_scep_for_ra_profile
#
# Activate SCEP for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param string $scep_profile_uuid SCEP Profile UUID (required)
# @param ActivateScepForRaProfileRequestDto $activate_scep_for_ra_profile_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'scep_profile_uuid' => {
        data_type => 'string',
        description => 'SCEP Profile UUID',
        required => '1',
    },
    'activate_scep_for_ra_profile_request_dto' => {
        data_type => 'ActivateScepForRaProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'activate_scep_for_ra_profile' } = {
        summary => 'Activate SCEP for RA Profile',
        params => $params,
        returns => 'RaProfileScepDetailResponseDto',
        };
}
# @return RaProfileScepDetailResponseDto
#
sub activate_scep_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling activate_scep_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling activate_scep_for_ra_profile");
    }

    # verify the required parameter 'scep_profile_uuid' is set
    unless (exists $args{'scep_profile_uuid'}) {
      croak("Missing the required parameter 'scep_profile_uuid' when calling activate_scep_for_ra_profile");
    }

    # verify the required parameter 'activate_scep_for_ra_profile_request_dto' is set
    unless (exists $args{'activate_scep_for_ra_profile_request_dto'}) {
      croak("Missing the required parameter 'activate_scep_for_ra_profile_request_dto' when calling activate_scep_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep/activate/{scepProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scep_profile_uuid'}) {
        my $_base_variable = "{" . "scepProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scep_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activate_scep_for_ra_profile_request_dto'}) {
        $_body_data = $args{'activate_scep_for_ra_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileScepDetailResponseDto', $response);
    return $_response_object;
}

#
# associate_ra_profile_with_approval_profile
#
# Associated RA profile with the Approval profile
#
# @param string $authority_uuid Authority instance UUID (required)
# @param string $ra_profile_uuid RA profile UUID (required)
# @param string $approval_profile_uuid Approval profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA profile UUID',
        required => '1',
    },
    'approval_profile_uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'associate_ra_profile_with_approval_profile' } = {
        summary => 'Associated RA profile with the Approval profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub associate_ra_profile_with_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling associate_ra_profile_with_approval_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling associate_ra_profile_with_approval_profile");
    }

    # verify the required parameter 'approval_profile_uuid' is set
    unless (exists $args{'approval_profile_uuid'}) {
      croak("Missing the required parameter 'approval_profile_uuid' when calling associate_ra_profile_with_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/approvalProfiles/{approvalProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'approval_profile_uuid'}) {
        my $_base_variable = "{" . "approvalProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'approval_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_delete_ra_profile
#
# Delete multiple RA Profiles
#
# @param ARRAY[string] $request_body RA Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'RA Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_ra_profile' } = {
        summary => 'Delete multiple RA Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_delete_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_disable_ra_profile
#
# Disable multiple RA Profiles
#
# @param ARRAY[string] $request_body RA Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'RA Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_disable_ra_profile' } = {
        summary => 'Disable multiple RA Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_disable_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_disable_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_enable_ra_profile
#
# Enable multiple RA Profiles
#
# @param ARRAY[string] $request_body RA Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'RA Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_enable_ra_profile' } = {
        summary => 'Enable multiple RA Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_enable_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_enable_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# check_ra_profile_compliance
#
# Initiate Certificate Compliance Check
#
# @param ARRAY[string] $request_body RA Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'RA Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_ra_profile_compliance' } = {
        summary => 'Initiate Certificate Compliance Check',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub check_ra_profile_compliance {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling check_ra_profile_compliance");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles/compliance';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_ra_profile
#
# Create RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param AddRaProfileRequestDto $add_ra_profile_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'add_ra_profile_request_dto' => {
        data_type => 'AddRaProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_ra_profile' } = {
        summary => 'Create RA Profile',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling create_ra_profile");
    }

    # verify the required parameter 'add_ra_profile_request_dto' is set
    unless (exists $args{'add_ra_profile_request_dto'}) {
      croak("Missing the required parameter 'add_ra_profile_request_dto' when calling create_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_ra_profile_request_dto'}) {
        $_body_data = $args{'add_ra_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# deactivate_acme_for_ra_profile
#
# Deactivate ACME for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deactivate_acme_for_ra_profile' } = {
        summary => 'Deactivate ACME for RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deactivate_acme_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling deactivate_acme_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling deactivate_acme_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme/deactivate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deactivate_cmp_for_ra_profile
#
# Deactivate CMP for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deactivate_cmp_for_ra_profile' } = {
        summary => 'Deactivate CMP for RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deactivate_cmp_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling deactivate_cmp_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling deactivate_cmp_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp/deactivate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deactivate_scep_for_ra_profile
#
# Deactivate SCEP for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deactivate_scep_for_ra_profile' } = {
        summary => 'Deactivate SCEP for RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deactivate_scep_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling deactivate_scep_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling deactivate_scep_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep/deactivate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_ra_profile
#
# Delete RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_ra_profile' } = {
        summary => 'Delete RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling delete_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling delete_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_ra_profile_without_authority
#
# Delete RA Profile
#
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_ra_profile_without_authority' } = {
        summary => 'Delete RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_ra_profile_without_authority {
    my ($self, %args) = @_;

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling delete_ra_profile_without_authority");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles/{raProfileUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_ra_profile
#
# Disable RA Profiles
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_ra_profile' } = {
        summary => 'Disable RA Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling disable_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling disable_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disassociate_ra_profile_from_approval_profile
#
# Disassociated RA profile with the Approval profile
#
# @param string $authority_uuid Authority instance UUID (required)
# @param string $ra_profile_uuid RA profile UUID (required)
# @param string $approval_profile_uuid Approval profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA profile UUID',
        required => '1',
    },
    'approval_profile_uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disassociate_ra_profile_from_approval_profile' } = {
        summary => 'Disassociated RA profile with the Approval profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disassociate_ra_profile_from_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling disassociate_ra_profile_from_approval_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling disassociate_ra_profile_from_approval_profile");
    }

    # verify the required parameter 'approval_profile_uuid' is set
    unless (exists $args{'approval_profile_uuid'}) {
      croak("Missing the required parameter 'approval_profile_uuid' when calling disassociate_ra_profile_from_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/approvalProfiles/{approvalProfileUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'approval_profile_uuid'}) {
        my $_base_variable = "{" . "approvalProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'approval_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_ra_profile
#
# Edit RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
# @param EditRaProfileRequestDto $edit_ra_profile_request_dto  (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    'edit_ra_profile_request_dto' => {
        data_type => 'EditRaProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_ra_profile' } = {
        summary => 'Edit RA Profile',
        params => $params,
        returns => 'RaProfileDto',
        };
}
# @return RaProfileDto
#
sub edit_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling edit_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling edit_ra_profile");
    }

    # verify the required parameter 'edit_ra_profile_request_dto' is set
    unless (exists $args{'edit_ra_profile_request_dto'}) {
      croak("Missing the required parameter 'edit_ra_profile_request_dto' when calling edit_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'edit_ra_profile_request_dto'}) {
        $_body_data = $args{'edit_ra_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileDto', $response);
    return $_response_object;
}

#
# enable_ra_profile
#
# Enable RA Profiles
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_ra_profile' } = {
        summary => 'Enable RA Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling enable_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling enable_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_acme_for_ra_profile
#
# Get ACME details for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_acme_for_ra_profile' } = {
        summary => 'Get ACME details for RA Profile',
        params => $params,
        returns => 'RaProfileAcmeDetailResponseDto',
        };
}
# @return RaProfileAcmeDetailResponseDto
#
sub get_acme_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_acme_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_acme_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/acme';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileAcmeDetailResponseDto', $response);
    return $_response_object;
}

#
# get_associated_approval_profiles
#
# List of Approval profiles associated with the RAProfile
#
# @param string $authority_uuid Authority instance UUID (required)
# @param string $ra_profile_uuid RA profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_associated_approval_profiles' } = {
        summary => 'List of Approval profiles associated with the RAProfile',
        params => $params,
        returns => 'ARRAY[ApprovalProfileDto]',
        };
}
# @return ARRAY[ApprovalProfileDto]
#
sub get_associated_approval_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_associated_approval_profiles");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_associated_approval_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/approvalProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ApprovalProfileDto]', $response);
    return $_response_object;
}

#
# get_associated_compliance_profiles
#
# Get Compliance Profiles for an RA Profile
#
# @param string $authority_uuid Authority UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_associated_compliance_profiles' } = {
        summary => 'Get Compliance Profiles for an RA Profile',
        params => $params,
        returns => 'ARRAY[SimplifiedComplianceProfileDto]',
        };
}
# @return ARRAY[SimplifiedComplianceProfileDto]
#
sub get_associated_compliance_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_associated_compliance_profiles");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_associated_compliance_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/complianceProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SimplifiedComplianceProfileDto]', $response);
    return $_response_object;
}

#
# get_authority_certificate_chain
#
# Retrieve certificates of authority belonging to RA profile
#
# @param string $authority_uuid Authority instance UUID (required)
# @param string $ra_profile_uuid RA profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_authority_certificate_chain' } = {
        summary => 'Retrieve certificates of authority belonging to RA profile',
        params => $params,
        returns => 'ARRAY[CertificateDetailDto]',
        };
}
# @return ARRAY[CertificateDetailDto]
#
sub get_authority_certificate_chain {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_authority_certificate_chain");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_authority_certificate_chain");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/caCertificates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CertificateDetailDto]', $response);
    return $_response_object;
}

#
# get_cmp_for_ra_profile
#
# Get CMP details for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_cmp_for_ra_profile' } = {
        summary => 'Get CMP details for RA Profile',
        params => $params,
        returns => 'RaProfileCmpDetailResponseDto',
        };
}
# @return RaProfileCmpDetailResponseDto
#
sub get_cmp_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_cmp_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_cmp_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/cmp';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileCmpDetailResponseDto', $response);
    return $_response_object;
}

#
# get_ra_profile
#
# Details of RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ra_profile' } = {
        summary => 'Details of RA Profile',
        params => $params,
        returns => 'RaProfileDto',
        };
}
# @return RaProfileDto
#
sub get_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileDto', $response);
    return $_response_object;
}

#
# get_ra_profile_without_authority
#
# Details of RA Profile
#
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_ra_profile_without_authority' } = {
        summary => 'Details of RA Profile',
        params => $params,
        returns => 'RaProfileDto',
        };
}
# @return RaProfileDto
#
sub get_ra_profile_without_authority {
    my ($self, %args) = @_;

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_ra_profile_without_authority");
    }

    # parse inputs
    my $_resource_path = '/v1/raProfiles/{raProfileUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileDto', $response);
    return $_response_object;
}

#
# get_scep_for_ra_profile
#
# Get SCEP details for RA Profile
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scep_for_ra_profile' } = {
        summary => 'Get SCEP details for RA Profile',
        params => $params,
        returns => 'RaProfileScepDetailResponseDto',
        };
}
# @return RaProfileScepDetailResponseDto
#
sub get_scep_for_ra_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling get_scep_for_ra_profile");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling get_scep_for_ra_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/protocols/scep';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RaProfileScepDetailResponseDto', $response);
    return $_response_object;
}

#
# list_ra_profile_issue_certificate_attributes
#
# Get issue Certificate Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_ra_profile_issue_certificate_attributes' } = {
        summary => 'Get issue Certificate Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_ra_profile_issue_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling list_ra_profile_issue_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling list_ra_profile_issue_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_ra_profile_revoke_certificate_attributes
#
# Get revocation Attributes
#
# @param string $authority_uuid Authority Instance UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'authority_uuid' => {
        data_type => 'string',
        description => 'Authority Instance UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_ra_profile_revoke_certificate_attributes' } = {
        summary => 'Get revocation Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_ra_profile_revoke_certificate_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'authority_uuid' is set
    unless (exists $args{'authority_uuid'}) {
      croak("Missing the required parameter 'authority_uuid' when calling list_ra_profile_revoke_certificate_attributes");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling list_ra_profile_revoke_certificate_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'authority_uuid'}) {
        my $_base_variable = "{" . "authorityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'authority_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_ra_profiles
#
# List of available RA Profiles
#
# @param boolean $enabled  (optional)
{
    my $params = {
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_ra_profiles' } = {
        summary => 'List of available RA Profiles',
        params => $params,
        returns => 'ARRAY[RaProfileDto]',
        };
}
# @return ARRAY[RaProfileDto]
#
sub list_ra_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/raProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RaProfileDto]', $response);
    return $_response_object;
}

1;
