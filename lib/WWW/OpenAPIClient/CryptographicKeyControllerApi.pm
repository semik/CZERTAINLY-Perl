=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CryptographicKeyControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# compromise_key
#
# Mark Key and its Items as Compromised
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param CompromiseKeyRequestDto $compromise_key_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'compromise_key_request_dto' => {
        data_type => 'CompromiseKeyRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compromise_key' } = {
        summary => 'Mark Key and its Items as Compromised',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compromise_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling compromise_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling compromise_key");
    }

    # verify the required parameter 'compromise_key_request_dto' is set
    unless (exists $args{'compromise_key_request_dto'}) {
      croak("Missing the required parameter 'compromise_key_request_dto' when calling compromise_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/compromise';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'compromise_key_request_dto'}) {
        $_body_data = $args{'compromise_key_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compromise_key_items
#
# Mark Multiple Key Items as Compromised
#
# @param BulkCompromiseKeyItemRequestDto $bulk_compromise_key_item_request_dto  (required)
{
    my $params = {
    'bulk_compromise_key_item_request_dto' => {
        data_type => 'BulkCompromiseKeyItemRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compromise_key_items' } = {
        summary => 'Mark Multiple Key Items as Compromised',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compromise_key_items {
    my ($self, %args) = @_;

    # verify the required parameter 'bulk_compromise_key_item_request_dto' is set
    unless (exists $args{'bulk_compromise_key_item_request_dto'}) {
      croak("Missing the required parameter 'bulk_compromise_key_item_request_dto' when calling compromise_key_items");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items/compromise';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'bulk_compromise_key_item_request_dto'}) {
        $_body_data = $args{'bulk_compromise_key_item_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# compromise_keys
#
# Mark Multiple Key and all its Items as Compromised
#
# @param BulkCompromiseKeyRequestDto $bulk_compromise_key_request_dto  (required)
{
    my $params = {
    'bulk_compromise_key_request_dto' => {
        data_type => 'BulkCompromiseKeyRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'compromise_keys' } = {
        summary => 'Mark Multiple Key and all its Items as Compromised',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub compromise_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'bulk_compromise_key_request_dto' is set
    unless (exists $args{'bulk_compromise_key_request_dto'}) {
      croak("Missing the required parameter 'bulk_compromise_key_request_dto' when calling compromise_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/compromise';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'bulk_compromise_key_request_dto'}) {
        $_body_data = $args{'bulk_compromise_key_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_key
#
# Create a new Cryptographic Key
#
# @param string $token_instance_uuid UUID of the Token Instance (required)
# @param string $token_profile_uuid UUID of the Token Profile (required)
# @param KeyRequestType $type Type of the key to be created (required)
# @param KeyRequestDto $key_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Instance',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Profile',
        required => '1',
    },
    'type' => {
        data_type => 'KeyRequestType',
        description => 'Type of the key to be created',
        required => '1',
    },
    'key_request_dto' => {
        data_type => 'KeyRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_key' } = {
        summary => 'Create a new Cryptographic Key',
        params => $params,
        returns => 'KeyDetailDto',
        };
}
# @return KeyDetailDto
#
sub create_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling create_key");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling create_key");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling create_key");
    }

    # verify the required parameter 'key_request_dto' is set
    unless (exists $args{'key_request_dto'}) {
      croak("Missing the required parameter 'key_request_dto' when calling create_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'key_request_dto'}) {
        $_body_data = $args{'key_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('KeyDetailDto', $response);
    return $_response_object;
}

#
# delete_key
#
# Delete Cryptographic Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param ARRAY[string] $request_body Key Item UUIDs (optional)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_key' } = {
        summary => 'Delete Cryptographic Key',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling delete_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_key_items
#
# Delete Multiple Cryptographic Key Items
#
# @param ARRAY[string] $request_body Key Items UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Items UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_key_items' } = {
        summary => 'Delete Multiple Cryptographic Key Items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_key_items {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling delete_key_items");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_keys
#
# Delete Multiple Cryptographic Key
#
# @param ARRAY[string] $request_body Key UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_keys' } = {
        summary => 'Delete Multiple Cryptographic Key',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling delete_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_key
#
# Destroy Cryptographic Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param ARRAY[string] $request_body Key UUIDs (optional)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key UUIDs',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_key' } = {
        summary => 'Destroy Cryptographic Key',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling destroy_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling destroy_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/destroy';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_key_items
#
# Destroy Multiple Cryptographic Key items
#
# @param ARRAY[string] $request_body Key Item UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_key_items' } = {
        summary => 'Destroy Multiple Cryptographic Key items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_key_items {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling destroy_key_items");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items/destroy';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_keys
#
# Destroy Multiple Cryptographic Key and its items
#
# @param ARRAY[string] $request_body Key UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_keys' } = {
        summary => 'Destroy Multiple Cryptographic Key and its items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling destroy_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/destroy';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_key
#
# Disable Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param ARRAY[string] $request_body Key Item UUIDs (optional)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_key' } = {
        summary => 'Disable Key',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling disable_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_key_items
#
# Disable multiple Key Items
#
# @param ARRAY[string] $request_body Key Item UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_key_items' } = {
        summary => 'Disable multiple Key Items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_key_items {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling disable_key_items");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_keys
#
# Disable multiple Keys
#
# @param ARRAY[string] $request_body Key UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_keys' } = {
        summary => 'Disable multiple Keys',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling disable_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_key
#
# Edit Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param EditKeyRequestDto $edit_key_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'edit_key_request_dto' => {
        data_type => 'EditKeyRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_key' } = {
        summary => 'Edit Key',
        params => $params,
        returns => 'KeyDetailDto',
        };
}
# @return KeyDetailDto
#
sub edit_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling edit_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_key");
    }

    # verify the required parameter 'edit_key_request_dto' is set
    unless (exists $args{'edit_key_request_dto'}) {
      croak("Missing the required parameter 'edit_key_request_dto' when calling edit_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'edit_key_request_dto'}) {
        $_body_data = $args{'edit_key_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('KeyDetailDto', $response);
    return $_response_object;
}

#
# enable_key
#
# Enable Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param ARRAY[string] $request_body Key Item UUIDs (optional)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_key' } = {
        summary => 'Enable Key',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling enable_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# enable_key_items
#
# Enable multiple Key Items
#
# @param ARRAY[string] $request_body Key Item UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key Item UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_key_items' } = {
        summary => 'Enable multiple Key Items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_key_items {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling enable_key_items");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# enable_keys
#
# Enable multiple Keys
#
# @param ARRAY[string] $request_body Key UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Key UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_keys' } = {
        summary => 'Enable multiple Keys',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling enable_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_event_history
#
# Get Key Item event history
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_event_history' } = {
        summary => 'Get Key Item event history',
        params => $params,
        returns => 'ARRAY[KeyEventHistoryDto]',
        };
}
# @return ARRAY[KeyEventHistoryDto]
#
sub get_event_history {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling get_event_history");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_event_history");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling get_event_history");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[KeyEventHistoryDto]', $response);
    return $_response_object;
}

#
# get_key
#
# Get Cryptographic Key Detail
#
# @param string $token_instance_uuid UUID of the Token Instance (required)
# @param string $uuid UUID of the Key (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Instance',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'UUID of the Key',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_key' } = {
        summary => 'Get Cryptographic Key Detail',
        params => $params,
        returns => 'KeyDetailDto',
        };
}
# @return KeyDetailDto
#
sub get_key {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling get_key");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_key");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('KeyDetailDto', $response);
    return $_response_object;
}

#
# get_key_item
#
# Get Cryptographic Key Detail
#
# @param string $token_instance_uuid UUID of the Token Instance (required)
# @param string $uuid UUID of the Key (required)
# @param string $key_item_uuid UUID of the Key Item (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Instance',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'UUID of the Key',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'UUID of the Key Item',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_key_item' } = {
        summary => 'Get Cryptographic Key Detail',
        params => $params,
        returns => 'KeyItemDetailDto',
        };
}
# @return KeyItemDetailDto
#
sub get_key_item {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling get_key_item");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_key_item");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling get_key_item");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('KeyItemDetailDto', $response);
    return $_response_object;
}

#
# get_searchable_field_information1
#
# Get CryptographicKey searchable fields information
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_searchable_field_information1' } = {
        summary => 'Get CryptographicKey searchable fields information',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub get_searchable_field_information1 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/keys/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# list_create_key_attributes
#
# List of Attributes to create a Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param KeyRequestType $type Type of the key to be created (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'type' => {
        data_type => 'KeyRequestType',
        description => 'Type of the key to be created',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_create_key_attributes' } = {
        summary => 'List of Attributes to create a Key',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_create_key_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling list_create_key_attributes");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling list_create_key_attributes");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling list_create_key_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_cryptographic_keys
#
# List cryptographic keys
#
# @param SearchRequestDto $search_request_dto  (required)
{
    my $params = {
    'search_request_dto' => {
        data_type => 'SearchRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_cryptographic_keys' } = {
        summary => 'List cryptographic keys',
        params => $params,
        returns => 'CryptographicKeyResponseDto',
        };
}
# @return CryptographicKeyResponseDto
#
sub list_cryptographic_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'search_request_dto' is set
    unless (exists $args{'search_request_dto'}) {
      croak("Missing the required parameter 'search_request_dto' when calling list_cryptographic_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/keys';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_request_dto'}) {
        $_body_data = $args{'search_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CryptographicKeyResponseDto', $response);
    return $_response_object;
}

#
# list_key_pairs
#
# List Cryptographic Keys with full Key Pairs
#
# @param string $token_profile_uuid  (optional)
{
    my $params = {
    'token_profile_uuid' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_key_pairs' } = {
        summary => 'List Cryptographic Keys with full Key Pairs',
        params => $params,
        returns => 'ARRAY[KeyDto]',
        };
}
# @return ARRAY[KeyDto]
#
sub list_key_pairs {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/keys/pairs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'token_profile_uuid'}) {
        $query_params->{'tokenProfileUuid'} = $self->{api_client}->to_query_value($args{'token_profile_uuid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[KeyDto]', $response);
    return $_response_object;
}

#
# sync_keys
#
# Sync Keys from connector
#
# @param string $token_instance_uuid Token Instance UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_keys' } = {
        summary => 'Sync Keys from connector',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub sync_keys {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling sync_keys");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/sync';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_key_item_usages
#
# Update Key Usages for Multiple Key Items
#
# @param BulkKeyItemUsageRequestDto $bulk_key_item_usage_request_dto  (required)
{
    my $params = {
    'bulk_key_item_usage_request_dto' => {
        data_type => 'BulkKeyItemUsageRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_key_item_usages' } = {
        summary => 'Update Key Usages for Multiple Key Items',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_key_item_usages {
    my ($self, %args) = @_;

    # verify the required parameter 'bulk_key_item_usage_request_dto' is set
    unless (exists $args{'bulk_key_item_usage_request_dto'}) {
      croak("Missing the required parameter 'bulk_key_item_usage_request_dto' when calling update_key_item_usages");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/items/usages';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'bulk_key_item_usage_request_dto'}) {
        $_body_data = $args{'bulk_key_item_usage_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_key_usages1
#
# Update Key Usage
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Key UUID (required)
# @param UpdateKeyUsageRequestDto $update_key_usage_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'update_key_usage_request_dto' => {
        data_type => 'UpdateKeyUsageRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_key_usages1' } = {
        summary => 'Update Key Usage',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_key_usages1 {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling update_key_usages1");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_key_usages1");
    }

    # verify the required parameter 'update_key_usage_request_dto' is set
    unless (exists $args{'update_key_usage_request_dto'}) {
      croak("Missing the required parameter 'update_key_usage_request_dto' when calling update_key_usages1");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/keys/{uuid}/usages';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_key_usage_request_dto'}) {
        $_body_data = $args{'update_key_usage_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_keys_usages1
#
# Update Key Usages for Multiple Keys
#
# @param BulkKeyUsageRequestDto $bulk_key_usage_request_dto  (required)
{
    my $params = {
    'bulk_key_usage_request_dto' => {
        data_type => 'BulkKeyUsageRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_keys_usages1' } = {
        summary => 'Update Key Usages for Multiple Keys',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_keys_usages1 {
    my ($self, %args) = @_;

    # verify the required parameter 'bulk_key_usage_request_dto' is set
    unless (exists $args{'bulk_key_usage_request_dto'}) {
      croak("Missing the required parameter 'bulk_key_usage_request_dto' when calling update_keys_usages1");
    }

    # parse inputs
    my $_resource_path = '/v1/keys/usages';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'bulk_key_usage_request_dto'}) {
        $_body_data = $args{'bulk_key_usage_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
