=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AuthenticationManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_auth_resources
#
# Get Auth Resources
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_auth_resources' } = {
        summary => 'Get Auth Resources',
        params => $params,
        returns => 'ARRAY[AuthResourceDto]',
        };
}
# @return ARRAY[AuthResourceDto]
#
sub get_auth_resources {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/auth/resources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AuthResourceDto]', $response);
    return $_response_object;
}

#
# get_objects_for_resource
#
# Get List of objects for Object Access
#
# @param Resource $resource_name Resource Name (required)
{
    my $params = {
    'resource_name' => {
        data_type => 'Resource',
        description => 'Resource Name',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_objects_for_resource' } = {
        summary => 'Get List of objects for Object Access',
        params => $params,
        returns => 'ARRAY[NameAndUuidDto]',
        };
}
# @return ARRAY[NameAndUuidDto]
#
sub get_objects_for_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'resource_name' is set
    unless (exists $args{'resource_name'}) {
      croak("Missing the required parameter 'resource_name' when calling get_objects_for_resource");
    }

    # parse inputs
    my $_resource_path = '/v1/auth/resources/{resourceName}/objects';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'resource_name'}) {
        my $_base_variable = "{" . "resourceName" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[NameAndUuidDto]', $response);
    return $_response_object;
}

#
# profile
#
# Profile Authorization
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'profile' } = {
        summary => 'Profile Authorization',
        params => $params,
        returns => 'UserDetailDto',
        };
}
# @return UserDetailDto
#
sub profile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/auth/profile';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserDetailDto', $response);
    return $_response_object;
}

#
# update_user_profile
#
# Update User Profile
#
# @param UpdateUserRequestDto $update_user_request_dto  (required)
{
    my $params = {
    'update_user_request_dto' => {
        data_type => 'UpdateUserRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_profile' } = {
        summary => 'Update User Profile',
        params => $params,
        returns => 'UserDetailDto',
        };
}
# @return UserDetailDto
#
sub update_user_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'update_user_request_dto' is set
    unless (exists $args{'update_user_request_dto'}) {
      croak("Missing the required parameter 'update_user_request_dto' when calling update_user_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/auth/profile';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_user_request_dto'}) {
        $_body_data = $args{'update_user_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserDetailDto', $response);
    return $_response_object;
}

1;
