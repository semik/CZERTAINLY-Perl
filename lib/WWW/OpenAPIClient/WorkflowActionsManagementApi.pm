=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::WorkflowActionsManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_action
#
# Create Action
#
# @param ActionRequestDto $action_request_dto  (required)
{
    my $params = {
    'action_request_dto' => {
        data_type => 'ActionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_action' } = {
        summary => 'Create Action',
        params => $params,
        returns => 'ActionDetailDto',
        };
}
# @return ActionDetailDto
#
sub create_action {
    my ($self, %args) = @_;

    # verify the required parameter 'action_request_dto' is set
    unless (exists $args{'action_request_dto'}) {
      croak("Missing the required parameter 'action_request_dto' when calling create_action");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/actions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'action_request_dto'}) {
        $_body_data = $args{'action_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActionDetailDto', $response);
    return $_response_object;
}

#
# create_execution
#
# Create Execution
#
# @param ExecutionRequestDto $execution_request_dto  (required)
{
    my $params = {
    'execution_request_dto' => {
        data_type => 'ExecutionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_execution' } = {
        summary => 'Create Execution',
        params => $params,
        returns => 'ExecutionDto',
        };
}
# @return ExecutionDto
#
sub create_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'execution_request_dto' is set
    unless (exists $args{'execution_request_dto'}) {
      croak("Missing the required parameter 'execution_request_dto' when calling create_execution");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/executions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'execution_request_dto'}) {
        $_body_data = $args{'execution_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExecutionDto', $response);
    return $_response_object;
}

#
# delete_action
#
# Delete Action
#
# @param string $action_uuid Action UUID (required)
{
    my $params = {
    'action_uuid' => {
        data_type => 'string',
        description => 'Action UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_action' } = {
        summary => 'Delete Action',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_action {
    my ($self, %args) = @_;

    # verify the required parameter 'action_uuid' is set
    unless (exists $args{'action_uuid'}) {
      croak("Missing the required parameter 'action_uuid' when calling delete_action");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/actions/{actionUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'action_uuid'}) {
        my $_base_variable = "{" . "actionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_execution
#
# Delete Execution
#
# @param string $execution_uuid Execution UUID (required)
{
    my $params = {
    'execution_uuid' => {
        data_type => 'string',
        description => 'Execution UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_execution' } = {
        summary => 'Delete Execution',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'execution_uuid' is set
    unless (exists $args{'execution_uuid'}) {
      croak("Missing the required parameter 'execution_uuid' when calling delete_execution");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/executions/{executionUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'execution_uuid'}) {
        my $_base_variable = "{" . "executionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_action
#
# Get Action Details
#
# @param string $action_uuid Action UUID (required)
{
    my $params = {
    'action_uuid' => {
        data_type => 'string',
        description => 'Action UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_action' } = {
        summary => 'Get Action Details',
        params => $params,
        returns => 'ActionDetailDto',
        };
}
# @return ActionDetailDto
#
sub get_action {
    my ($self, %args) = @_;

    # verify the required parameter 'action_uuid' is set
    unless (exists $args{'action_uuid'}) {
      croak("Missing the required parameter 'action_uuid' when calling get_action");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/actions/{actionUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'action_uuid'}) {
        my $_base_variable = "{" . "actionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActionDetailDto', $response);
    return $_response_object;
}

#
# get_execution
#
# Get Execution Details
#
# @param string $execution_uuid Execution UUID (required)
{
    my $params = {
    'execution_uuid' => {
        data_type => 'string',
        description => 'Execution UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_execution' } = {
        summary => 'Get Execution Details',
        params => $params,
        returns => 'ExecutionDto',
        };
}
# @return ExecutionDto
#
sub get_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'execution_uuid' is set
    unless (exists $args{'execution_uuid'}) {
      croak("Missing the required parameter 'execution_uuid' when calling get_execution");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/executions/{executionUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'execution_uuid'}) {
        my $_base_variable = "{" . "executionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExecutionDto', $response);
    return $_response_object;
}

#
# list_actions
#
# List Actions
#
# @param Resource $resource  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_actions' } = {
        summary => 'List Actions',
        params => $params,
        returns => 'ARRAY[ActionDto]',
        };
}
# @return ARRAY[ActionDto]
#
sub list_actions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/workflows/actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ActionDto]', $response);
    return $_response_object;
}

#
# list_executions
#
# List executions
#
# @param Resource $resource  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_executions' } = {
        summary => 'List executions',
        params => $params,
        returns => 'ARRAY[ExecutionDto]',
        };
}
# @return ARRAY[ExecutionDto]
#
sub list_executions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/workflows/executions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ExecutionDto]', $response);
    return $_response_object;
}

#
# update_action
#
# Update Action
#
# @param string $action_uuid Action UUID (required)
# @param UpdateActionRequestDto $update_action_request_dto  (required)
{
    my $params = {
    'action_uuid' => {
        data_type => 'string',
        description => 'Action UUID',
        required => '1',
    },
    'update_action_request_dto' => {
        data_type => 'UpdateActionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_action' } = {
        summary => 'Update Action',
        params => $params,
        returns => 'ActionDetailDto',
        };
}
# @return ActionDetailDto
#
sub update_action {
    my ($self, %args) = @_;

    # verify the required parameter 'action_uuid' is set
    unless (exists $args{'action_uuid'}) {
      croak("Missing the required parameter 'action_uuid' when calling update_action");
    }

    # verify the required parameter 'update_action_request_dto' is set
    unless (exists $args{'update_action_request_dto'}) {
      croak("Missing the required parameter 'update_action_request_dto' when calling update_action");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/actions/{actionUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'action_uuid'}) {
        my $_base_variable = "{" . "actionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'action_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_action_request_dto'}) {
        $_body_data = $args{'update_action_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActionDetailDto', $response);
    return $_response_object;
}

#
# update_execution
#
# Update Execution
#
# @param string $execution_uuid Execution UUID (required)
# @param UpdateExecutionRequestDto $update_execution_request_dto  (required)
{
    my $params = {
    'execution_uuid' => {
        data_type => 'string',
        description => 'Execution UUID',
        required => '1',
    },
    'update_execution_request_dto' => {
        data_type => 'UpdateExecutionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_execution' } = {
        summary => 'Update Execution',
        params => $params,
        returns => 'ExecutionDto',
        };
}
# @return ExecutionDto
#
sub update_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'execution_uuid' is set
    unless (exists $args{'execution_uuid'}) {
      croak("Missing the required parameter 'execution_uuid' when calling update_execution");
    }

    # verify the required parameter 'update_execution_request_dto' is set
    unless (exists $args{'update_execution_request_dto'}) {
      croak("Missing the required parameter 'update_execution_request_dto' when calling update_execution");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/executions/{executionUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'execution_uuid'}) {
        my $_base_variable = "{" . "executionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_execution_request_dto'}) {
        $_body_data = $args{'update_execution_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExecutionDto', $response);
    return $_response_object;
}

1;
