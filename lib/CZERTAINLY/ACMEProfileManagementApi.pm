=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::ACMEProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_acme_profile
#
# Delete multiple ACME Profiles
#
# @param ARRAY[string] $request_body ACME Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'ACME Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_acme_profile' } = {
        summary => 'Delete multiple ACME Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub bulk_delete_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/delete';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# bulk_disable_acme_profile
#
# Disable multiple ACME Profile
#
# @param ARRAY[string] $request_body ACME Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'ACME Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_disable_acme_profile' } = {
        summary => 'Disable multiple ACME Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_disable_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_disable_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_enable_acme_profile
#
# Enable multiple ACME Profiles
#
# @param ARRAY[string] $request_body ACME Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'ACME Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_enable_acme_profile' } = {
        summary => 'Enable multiple ACME Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_enable_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_enable_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_acme_profile
#
# Create ACME Profile
#
# @param AcmeProfileRequestDto $acme_profile_request_dto  (required)
{
    my $params = {
    'acme_profile_request_dto' => {
        data_type => 'AcmeProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_acme_profile' } = {
        summary => 'Create ACME Profile',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'acme_profile_request_dto' is set
    unless (exists $args{'acme_profile_request_dto'}) {
      croak("Missing the required parameter 'acme_profile_request_dto' when calling create_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'acme_profile_request_dto'}) {
        $_body_data = $args{'acme_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_acme_profile
#
# Delete ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_acme_profile' } = {
        summary => 'Delete ACME Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_acme_profile
#
# Disable ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_acme_profile' } = {
        summary => 'Disable ACME Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_acme_profile
#
# Edit ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
# @param AcmeProfileEditRequestDto $acme_profile_edit_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    'acme_profile_edit_request_dto' => {
        data_type => 'AcmeProfileEditRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_acme_profile' } = {
        summary => 'Edit ACME Profile',
        params => $params,
        returns => 'AcmeProfileDto',
        };
}
# @return AcmeProfileDto
#
sub edit_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_acme_profile");
    }

    # verify the required parameter 'acme_profile_edit_request_dto' is set
    unless (exists $args{'acme_profile_edit_request_dto'}) {
      croak("Missing the required parameter 'acme_profile_edit_request_dto' when calling edit_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'acme_profile_edit_request_dto'}) {
        $_body_data = $args{'acme_profile_edit_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AcmeProfileDto', $response);
    return $_response_object;
}

#
# enable_acme_profile
#
# Enable ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_acme_profile' } = {
        summary => 'Enable ACME Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# force_delete_acme_profiles
#
# Force delete multiple ACME Profiles
#
# @param ARRAY[string] $request_body ACME Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'ACME Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'force_delete_acme_profiles' } = {
        summary => 'Force delete multiple ACME Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub force_delete_acme_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling force_delete_acme_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/delete/force';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# get_acme_profile
#
# Get details of ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_acme_profile' } = {
        summary => 'Get details of ACME Profile',
        params => $params,
        returns => 'AcmeProfileDto',
        };
}
# @return AcmeProfileDto
#
sub get_acme_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_acme_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AcmeProfileDto', $response);
    return $_response_object;
}

#
# list_acme_profiles
#
# Get list of ACME Profiles
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_acme_profiles' } = {
        summary => 'Get list of ACME Profiles',
        params => $params,
        returns => 'ARRAY[AcmeProfileListDto]',
        };
}
# @return ARRAY[AcmeProfileListDto]
#
sub list_acme_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AcmeProfileListDto]', $response);
    return $_response_object;
}

#
# update_ra_profile2
#
# Update RA Profile for ACME Profile
#
# @param string $uuid ACME Profile UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'ACME Profile UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_ra_profile2' } = {
        summary => 'Update RA Profile for ACME Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_ra_profile2 {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_ra_profile2");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling update_ra_profile2");
    }

    # parse inputs
    my $_resource_path = '/v1/acmeProfiles/{uuid}/raprofile/{raProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
