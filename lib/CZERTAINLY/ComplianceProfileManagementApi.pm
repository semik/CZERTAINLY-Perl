=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::ComplianceProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_group
#
# Add group to a Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param ComplianceGroupRequestDto $compliance_group_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'compliance_group_request_dto' => {
        data_type => 'ComplianceGroupRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_group' } = {
        summary => 'Add group to a Compliance Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_group {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling add_group");
    }

    # verify the required parameter 'compliance_group_request_dto' is set
    unless (exists $args{'compliance_group_request_dto'}) {
      croak("Missing the required parameter 'compliance_group_request_dto' when calling add_group");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/groups';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'compliance_group_request_dto'}) {
        $_body_data = $args{'compliance_group_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# add_rule
#
# Add rule to a Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param ComplianceRuleAdditionRequestDto $compliance_rule_addition_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'compliance_rule_addition_request_dto' => {
        data_type => 'ComplianceRuleAdditionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_rule' } = {
        summary => 'Add rule to a Compliance Profile',
        params => $params,
        returns => 'ComplianceProfileRuleDto',
        };
}
# @return ComplianceProfileRuleDto
#
sub add_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling add_rule");
    }

    # verify the required parameter 'compliance_rule_addition_request_dto' is set
    unless (exists $args{'compliance_rule_addition_request_dto'}) {
      croak("Missing the required parameter 'compliance_rule_addition_request_dto' when calling add_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/rules';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'compliance_rule_addition_request_dto'}) {
        $_body_data = $args{'compliance_rule_addition_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComplianceProfileRuleDto', $response);
    return $_response_object;
}

#
# associate_profiles
#
# Associate Compliance Profile to RA Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param RaProfileAssociationRequestDto $ra_profile_association_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'ra_profile_association_request_dto' => {
        data_type => 'RaProfileAssociationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'associate_profiles' } = {
        summary => 'Associate Compliance Profile to RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub associate_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling associate_profiles");
    }

    # verify the required parameter 'ra_profile_association_request_dto' is set
    unless (exists $args{'ra_profile_association_request_dto'}) {
      croak("Missing the required parameter 'ra_profile_association_request_dto' when calling associate_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/raProfiles/associate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ra_profile_association_request_dto'}) {
        $_body_data = $args{'ra_profile_association_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_delete_compliance_profiles
#
# Delete multiple Compliance Profiles
#
# @param ARRAY[string] $request_body Compliance Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Compliance Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_compliance_profiles' } = {
        summary => 'Delete multiple Compliance Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub bulk_delete_compliance_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_compliance_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# check_compliance
#
# Initiate Certificate Compliance Check
#
# @param ARRAY[string] $request_body RA Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'RA Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_compliance' } = {
        summary => 'Initiate Certificate Compliance Check',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub check_compliance {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling check_compliance");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/compliance';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_compliance_profile
#
# Add Compliance Profile
#
# @param ComplianceProfileRequestDto $compliance_profile_request_dto  (required)
{
    my $params = {
    'compliance_profile_request_dto' => {
        data_type => 'ComplianceProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_compliance_profile' } = {
        summary => 'Add Compliance Profile',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_compliance_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'compliance_profile_request_dto' is set
    unless (exists $args{'compliance_profile_request_dto'}) {
      croak("Missing the required parameter 'compliance_profile_request_dto' when calling create_compliance_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'compliance_profile_request_dto'}) {
        $_body_data = $args{'compliance_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_compliance_profile
#
# Delete Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_compliance_profile' } = {
        summary => 'Delete Compliance Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_compliance_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_compliance_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disassociate_profiles
#
# Disassociate Compliance Profile to RA Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param RaProfileAssociationRequestDto $ra_profile_association_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'ra_profile_association_request_dto' => {
        data_type => 'RaProfileAssociationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disassociate_profiles' } = {
        summary => 'Disassociate Compliance Profile to RA Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disassociate_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disassociate_profiles");
    }

    # verify the required parameter 'ra_profile_association_request_dto' is set
    unless (exists $args{'ra_profile_association_request_dto'}) {
      croak("Missing the required parameter 'ra_profile_association_request_dto' when calling disassociate_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/raProfiles/disassociate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ra_profile_association_request_dto'}) {
        $_body_data = $args{'ra_profile_association_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# force_delete_compliance_profiles
#
# Force delete Compliance Profiles
#
# @param ARRAY[string] $request_body  (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'force_delete_compliance_profiles' } = {
        summary => 'Force delete Compliance Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub force_delete_compliance_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling force_delete_compliance_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/force';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# get_associated_ra_profiles
#
# Get RA Profiles for a Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_associated_ra_profiles' } = {
        summary => 'Get RA Profiles for a Compliance Profile',
        params => $params,
        returns => 'ARRAY[SimplifiedRaProfileDto]',
        };
}
# @return ARRAY[SimplifiedRaProfileDto]
#
sub get_associated_ra_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_associated_ra_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/raProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SimplifiedRaProfileDto]', $response);
    return $_response_object;
}

#
# get_compliance_groups
#
# Get Compliance groups
#
# @param string $compliance_provider  (optional)
# @param string $kind  (optional)
{
    my $params = {
    'compliance_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'kind' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_compliance_groups' } = {
        summary => 'Get Compliance groups',
        params => $params,
        returns => 'ARRAY[ComplianceGroupsListResponseDto]',
        };
}
# @return ARRAY[ComplianceGroupsListResponseDto]
#
sub get_compliance_groups {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'compliance_provider'}) {
        $query_params->{'complianceProvider'} = $self->{api_client}->to_query_value($args{'compliance_provider'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ComplianceGroupsListResponseDto]', $response);
    return $_response_object;
}

#
# get_compliance_profile
#
# Details of a Compliance Profiles
#
# @param string $uuid Compliance Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_compliance_profile' } = {
        summary => 'Details of a Compliance Profiles',
        params => $params,
        returns => 'ComplianceProfileDto',
        };
}
# @return ComplianceProfileDto
#
sub get_compliance_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_compliance_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComplianceProfileDto', $response);
    return $_response_object;
}

#
# get_compliance_rules
#
# Get Compliance rules
#
# @param string $compliance_provider  (optional)
# @param string $kind  (optional)
# @param ARRAY[CertificateType] $certificate_type  (optional)
{
    my $params = {
    'compliance_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'kind' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'certificate_type' => {
        data_type => 'ARRAY[CertificateType]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_compliance_rules' } = {
        summary => 'Get Compliance rules',
        params => $params,
        returns => 'ARRAY[ComplianceRulesListResponseDto]',
        };
}
# @return ARRAY[ComplianceRulesListResponseDto]
#
sub get_compliance_rules {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'compliance_provider'}) {
        $query_params->{'complianceProvider'} = $self->{api_client}->to_query_value($args{'compliance_provider'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    # query params
    if ( exists $args{'certificate_type'}) {
        $query_params->{'certificateType'} = $self->{api_client}->to_query_value($args{'certificate_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ComplianceRulesListResponseDto]', $response);
    return $_response_object;
}

#
# list_compliance_profiles
#
# List of available Compliance Profiles
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_compliance_profiles' } = {
        summary => 'List of available Compliance Profiles',
        params => $params,
        returns => 'ARRAY[ComplianceProfilesListDto]',
        };
}
# @return ARRAY[ComplianceProfilesListDto]
#
sub list_compliance_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ComplianceProfilesListDto]', $response);
    return $_response_object;
}

#
# remove_group
#
# Delete group from a Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param ComplianceGroupRequestDto $compliance_group_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'compliance_group_request_dto' => {
        data_type => 'ComplianceGroupRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_group' } = {
        summary => 'Delete group from a Compliance Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_group {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling remove_group");
    }

    # verify the required parameter 'compliance_group_request_dto' is set
    unless (exists $args{'compliance_group_request_dto'}) {
      croak("Missing the required parameter 'compliance_group_request_dto' when calling remove_group");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/groups';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'compliance_group_request_dto'}) {
        $_body_data = $args{'compliance_group_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# remove_rule
#
# Delete rule from a Compliance Profile
#
# @param string $uuid Compliance Profile UUID (required)
# @param ComplianceRuleDeletionRequestDto $compliance_rule_deletion_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Compliance Profile UUID',
        required => '1',
    },
    'compliance_rule_deletion_request_dto' => {
        data_type => 'ComplianceRuleDeletionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_rule' } = {
        summary => 'Delete rule from a Compliance Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling remove_rule");
    }

    # verify the required parameter 'compliance_rule_deletion_request_dto' is set
    unless (exists $args{'compliance_rule_deletion_request_dto'}) {
      croak("Missing the required parameter 'compliance_rule_deletion_request_dto' when calling remove_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/complianceProfiles/{uuid}/rules';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'compliance_rule_deletion_request_dto'}) {
        $_body_data = $args{'compliance_rule_deletion_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
