=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::CMPProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_cmp_profile
#
# Delete multiple CMP Profiles
#
# @param ARRAY[string] $request_body CMP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'CMP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_cmp_profile' } = {
        summary => 'Delete multiple CMP Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub bulk_delete_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/delete';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# bulk_disable_cmp_profile
#
# Disable multiple CMP Profile
#
# @param ARRAY[string] $request_body CMP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'CMP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_disable_cmp_profile' } = {
        summary => 'Disable multiple CMP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_disable_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_disable_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_enable_cmp_profile
#
# Enable multiple CMP Profiles
#
# @param ARRAY[string] $request_body CMP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'CMP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_enable_cmp_profile' } = {
        summary => 'Enable multiple CMP Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_enable_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_enable_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_cmp_profile
#
# Create CMP Profile
#
# @param CmpProfileRequestDto $cmp_profile_request_dto  (required)
{
    my $params = {
    'cmp_profile_request_dto' => {
        data_type => 'CmpProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_cmp_profile' } = {
        summary => 'Create CMP Profile',
        params => $params,
        returns => 'CmpProfileDetailDto',
        };
}
# @return CmpProfileDetailDto
#
sub create_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_request_dto' is set
    unless (exists $args{'cmp_profile_request_dto'}) {
      croak("Missing the required parameter 'cmp_profile_request_dto' when calling create_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'cmp_profile_request_dto'}) {
        $_body_data = $args{'cmp_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CmpProfileDetailDto', $response);
    return $_response_object;
}

#
# delete_cmp_profile
#
# Delete CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_cmp_profile' } = {
        summary => 'Delete CMP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling delete_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_cmp_profile
#
# Disable CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_cmp_profile' } = {
        summary => 'Disable CMP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling disable_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_cmp_profile
#
# Edit CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
# @param CmpProfileEditRequestDto $cmp_profile_edit_request_dto  (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    'cmp_profile_edit_request_dto' => {
        data_type => 'CmpProfileEditRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_cmp_profile' } = {
        summary => 'Edit CMP Profile',
        params => $params,
        returns => 'CmpProfileDetailDto',
        };
}
# @return CmpProfileDetailDto
#
sub edit_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling edit_cmp_profile");
    }

    # verify the required parameter 'cmp_profile_edit_request_dto' is set
    unless (exists $args{'cmp_profile_edit_request_dto'}) {
      croak("Missing the required parameter 'cmp_profile_edit_request_dto' when calling edit_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cmp_profile_edit_request_dto'}) {
        $_body_data = $args{'cmp_profile_edit_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CmpProfileDetailDto', $response);
    return $_response_object;
}

#
# enable_cmp_profile
#
# Enable CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_cmp_profile' } = {
        summary => 'Enable CMP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling enable_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# force_delete_cmp_profiles
#
# Force delete multiple CMP Profiles
#
# @param ARRAY[string] $request_body CMP Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'CMP Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'force_delete_cmp_profiles' } = {
        summary => 'Force delete multiple CMP Profiles',
        params => $params,
        returns => 'ARRAY[BulkActionMessageDto]',
        };
}
# @return ARRAY[BulkActionMessageDto]
#
sub force_delete_cmp_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling force_delete_cmp_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/delete/force';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BulkActionMessageDto]', $response);
    return $_response_object;
}

#
# get_cmp_profile
#
# Get details of CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_cmp_profile' } = {
        summary => 'Get details of CMP Profile',
        params => $params,
        returns => 'CmpProfileDetailDto',
        };
}
# @return CmpProfileDetailDto
#
sub get_cmp_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling get_cmp_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CmpProfileDetailDto', $response);
    return $_response_object;
}

#
# list_cmp_profiles
#
# Get list of CMP Profiles
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_cmp_profiles' } = {
        summary => 'Get list of CMP Profiles',
        params => $params,
        returns => 'ARRAY[CmpProfileDto]',
        };
}
# @return ARRAY[CmpProfileDto]
#
sub list_cmp_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CmpProfileDto]', $response);
    return $_response_object;
}

#
# list_cmp_signing_certificates
#
# Get list of certificates eligible for signing of CMP responses
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_cmp_signing_certificates' } = {
        summary => 'Get list of certificates eligible for signing of CMP responses',
        params => $params,
        returns => 'ARRAY[CertificateDto]',
        };
}
# @return ARRAY[CertificateDto]
#
sub list_cmp_signing_certificates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/signingCertificates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CertificateDto]', $response);
    return $_response_object;
}

#
# update_ra_profile1
#
# Update RA Profile for CMP Profile
#
# @param string $cmp_profile_uuid CMP Profile UUID (required)
# @param string $ra_profile_uuid RA Profile UUID (required)
{
    my $params = {
    'cmp_profile_uuid' => {
        data_type => 'string',
        description => 'CMP Profile UUID',
        required => '1',
    },
    'ra_profile_uuid' => {
        data_type => 'string',
        description => 'RA Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_ra_profile1' } = {
        summary => 'Update RA Profile for CMP Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_ra_profile1 {
    my ($self, %args) = @_;

    # verify the required parameter 'cmp_profile_uuid' is set
    unless (exists $args{'cmp_profile_uuid'}) {
      croak("Missing the required parameter 'cmp_profile_uuid' when calling update_ra_profile1");
    }

    # verify the required parameter 'ra_profile_uuid' is set
    unless (exists $args{'ra_profile_uuid'}) {
      croak("Missing the required parameter 'ra_profile_uuid' when calling update_ra_profile1");
    }

    # parse inputs
    my $_resource_path = '/v1/cmpProfiles/{cmpProfileUuid}/raProfiles/{raProfileUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cmp_profile_uuid'}) {
        my $_base_variable = "{" . "cmpProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cmp_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'ra_profile_uuid'}) {
        my $_base_variable = "{" . "raProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ra_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
