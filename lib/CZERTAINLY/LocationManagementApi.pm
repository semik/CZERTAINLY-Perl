=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::LocationManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_location
#
# Add Location
#
# @param string $entity_uuid Entity UUID (required)
# @param AddLocationRequestDto $add_location_request_dto  (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'add_location_request_dto' => {
        data_type => 'AddLocationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_location' } = {
        summary => 'Add Location',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub add_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling add_location");
    }

    # verify the required parameter 'add_location_request_dto' is set
    unless (exists $args{'add_location_request_dto'}) {
      croak("Missing the required parameter 'add_location_request_dto' when calling add_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_location_request_dto'}) {
        $_body_data = $args{'add_location_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_location
#
# Delete Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_location' } = {
        summary => 'Delete Location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling delete_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling delete_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_location
#
# Disable Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_location' } = {
        summary => 'Disable Location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling disable_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling disable_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_location
#
# Edit Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
# @param EditLocationRequestDto $edit_location_request_dto  (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    'edit_location_request_dto' => {
        data_type => 'EditLocationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_location' } = {
        summary => 'Edit Location',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub edit_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling edit_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling edit_location");
    }

    # verify the required parameter 'edit_location_request_dto' is set
    unless (exists $args{'edit_location_request_dto'}) {
      croak("Missing the required parameter 'edit_location_request_dto' when calling edit_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'edit_location_request_dto'}) {
        $_body_data = $args{'edit_location_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# enable_location
#
# Enable Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_location' } = {
        summary => 'Enable Location',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling enable_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling enable_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_location
#
# Get Location Details
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_location' } = {
        summary => 'Get Location Details',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub get_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling get_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling get_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# get_searchable_field_information
#
# Get Locations searchable fields information
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_searchable_field_information' } = {
        summary => 'Get Locations searchable fields information',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub get_searchable_field_information {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/locations/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# issue_certificate_to_location
#
# Issue Certificate to Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
# @param IssueToLocationRequestDto $issue_to_location_request_dto  (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    'issue_to_location_request_dto' => {
        data_type => 'IssueToLocationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'issue_certificate_to_location' } = {
        summary => 'Issue Certificate to Location',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub issue_certificate_to_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling issue_certificate_to_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling issue_certificate_to_location");
    }

    # verify the required parameter 'issue_to_location_request_dto' is set
    unless (exists $args{'issue_to_location_request_dto'}) {
      croak("Missing the required parameter 'issue_to_location_request_dto' when calling issue_certificate_to_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/certificates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'issue_to_location_request_dto'}) {
        $_body_data = $args{'issue_to_location_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# list_csr_attributes
#
# Get CSR Attributes
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_csr_attributes' } = {
        summary => 'Get CSR Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_csr_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling list_csr_attributes");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling list_csr_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/attributes/issue';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_locations
#
# List Locations
#
# @param SearchRequestDto $search_request_dto  (required)
{
    my $params = {
    'search_request_dto' => {
        data_type => 'SearchRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_locations' } = {
        summary => 'List Locations',
        params => $params,
        returns => 'LocationsResponseDto',
        };
}
# @return LocationsResponseDto
#
sub list_locations {
    my ($self, %args) = @_;

    # verify the required parameter 'search_request_dto' is set
    unless (exists $args{'search_request_dto'}) {
      croak("Missing the required parameter 'search_request_dto' when calling list_locations");
    }

    # parse inputs
    my $_resource_path = '/v1/locations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_request_dto'}) {
        $_body_data = $args{'search_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationsResponseDto', $response);
    return $_response_object;
}

#
# list_push_attributes
#
# Get push Attributes
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_push_attributes' } = {
        summary => 'Get push Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_push_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling list_push_attributes");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling list_push_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/attributes/push';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# push_certificate
#
# Push Certificate to Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
# @param PushToLocationRequestDto $push_to_location_request_dto  (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'push_to_location_request_dto' => {
        data_type => 'PushToLocationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'push_certificate' } = {
        summary => 'Push Certificate to Location',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub push_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling push_certificate");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling push_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling push_certificate");
    }

    # verify the required parameter 'push_to_location_request_dto' is set
    unless (exists $args{'push_to_location_request_dto'}) {
      croak("Missing the required parameter 'push_to_location_request_dto' when calling push_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'push_to_location_request_dto'}) {
        $_body_data = $args{'push_to_location_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# remove_certificate
#
# Remove Certificate from Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_certificate' } = {
        summary => 'Remove Certificate from Location',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub remove_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling remove_certificate");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling remove_certificate");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling remove_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# renew_certificate_in_location
#
# Renew Certificate in Location
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
# @param string $certificate_uuid Certificate UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'renew_certificate_in_location' } = {
        summary => 'Renew Certificate in Location',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub renew_certificate_in_location {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling renew_certificate_in_location");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling renew_certificate_in_location");
    }

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling renew_certificate_in_location");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

#
# update_location_content
#
# Sync Location content
#
# @param string $entity_uuid Entity UUID (required)
# @param string $location_uuid Location UUID (required)
{
    my $params = {
    'entity_uuid' => {
        data_type => 'string',
        description => 'Entity UUID',
        required => '1',
    },
    'location_uuid' => {
        data_type => 'string',
        description => 'Location UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_location_content' } = {
        summary => 'Sync Location content',
        params => $params,
        returns => 'LocationDto',
        };
}
# @return LocationDto
#
sub update_location_content {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_uuid' is set
    unless (exists $args{'entity_uuid'}) {
      croak("Missing the required parameter 'entity_uuid' when calling update_location_content");
    }

    # verify the required parameter 'location_uuid' is set
    unless (exists $args{'location_uuid'}) {
      croak("Missing the required parameter 'location_uuid' when calling update_location_content");
    }

    # parse inputs
    my $_resource_path = '/v1/entities/{entityUuid}/locations/{locationUuid}/sync';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'entity_uuid'}) {
        my $_base_variable = "{" . "entityUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entity_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'location_uuid'}) {
        my $_base_variable = "{" . "locationUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'location_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LocationDto', $response);
    return $_response_object;
}

1;
