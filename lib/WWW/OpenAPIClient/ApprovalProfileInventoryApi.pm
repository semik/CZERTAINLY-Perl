=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ApprovalProfileInventoryApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_approval_profile
#
# Create a Approval profile
#
# @param ApprovalProfileRequestDto $approval_profile_request_dto  (required)
{
    my $params = {
    'approval_profile_request_dto' => {
        data_type => 'ApprovalProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_approval_profile' } = {
        summary => 'Create a Approval profile',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'approval_profile_request_dto' is set
    unless (exists $args{'approval_profile_request_dto'}) {
      croak("Missing the required parameter 'approval_profile_request_dto' when calling create_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'approval_profile_request_dto'}) {
        $_body_data = $args{'approval_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_approval_profile
#
# Delete an approval profile
#
# @param string $uuid Approval profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_approval_profile' } = {
        summary => 'Delete an approval profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_approval_profile
#
# Disabling of Approval profile
#
# @param string $uuid Approval profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_approval_profile' } = {
        summary => 'Disabling of Approval profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_approval_profile
#
# Edit an Approval profile
#
# @param string $uuid Approval profile UUID (required)
# @param ApprovalProfileUpdateRequestDto $approval_profile_update_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    'approval_profile_update_request_dto' => {
        data_type => 'ApprovalProfileUpdateRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_approval_profile' } = {
        summary => 'Edit an Approval profile',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub edit_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_approval_profile");
    }

    # verify the required parameter 'approval_profile_update_request_dto' is set
    unless (exists $args{'approval_profile_update_request_dto'}) {
      croak("Missing the required parameter 'approval_profile_update_request_dto' when calling edit_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'approval_profile_update_request_dto'}) {
        $_body_data = $args{'approval_profile_update_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# enable_approval_profile
#
# Enabling of Approval profile
#
# @param string $uuid Approval profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_approval_profile' } = {
        summary => 'Enabling of Approval profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_approval_profile
#
# Get Approval Profile Details
#
# @param string $uuid Approval profile UUID (required)
# @param ApprovalProfileForVersionDto $approval_profile_for_version_dto Select specific version of the approval profile (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Approval profile UUID',
        required => '1',
    },
    'approval_profile_for_version_dto' => {
        data_type => 'ApprovalProfileForVersionDto',
        description => 'Select specific version of the approval profile',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_approval_profile' } = {
        summary => 'Get Approval Profile Details',
        params => $params,
        returns => 'ApprovalProfileDetailDto',
        };
}
# @return ApprovalProfileDetailDto
#
sub get_approval_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_approval_profile");
    }

    # verify the required parameter 'approval_profile_for_version_dto' is set
    unless (exists $args{'approval_profile_for_version_dto'}) {
      croak("Missing the required parameter 'approval_profile_for_version_dto' when calling get_approval_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'approval_profile_for_version_dto'}) {
        $query_params->{'approvalProfileForVersionDto'} = $self->{api_client}->to_query_value($args{'approval_profile_for_version_dto'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalProfileDetailDto', $response);
    return $_response_object;
}

#
# list_approval_profiles
#
# List Approval Profiles
#
# @param PaginationRequestDto $pagination_request_dto  (required)
{
    my $params = {
    'pagination_request_dto' => {
        data_type => 'PaginationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_approval_profiles' } = {
        summary => 'List Approval Profiles',
        params => $params,
        returns => 'ApprovalProfileResponseDto',
        };
}
# @return ApprovalProfileResponseDto
#
sub list_approval_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'pagination_request_dto' is set
    unless (exists $args{'pagination_request_dto'}) {
      croak("Missing the required parameter 'pagination_request_dto' when calling list_approval_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/approvalProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pagination_request_dto'}) {
        $query_params->{'paginationRequestDto'} = $self->{api_client}->to_query_value($args{'pagination_request_dto'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalProfileResponseDto', $response);
    return $_response_object;
}

1;
