=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::TokenInstanceControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# activate_token_instance
#
# Activate Token Instance
#
# @param string $uuid Token Instance UUID (required)
# @param ARRAY[RequestAttributeDto] $request_attribute_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'request_attribute_dto' => {
        data_type => 'ARRAY[RequestAttributeDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'activate_token_instance' } = {
        summary => 'Activate Token Instance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub activate_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling activate_token_instance");
    }

    # verify the required parameter 'request_attribute_dto' is set
    unless (exists $args{'request_attribute_dto'}) {
      croak("Missing the required parameter 'request_attribute_dto' when calling activate_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}/activate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_attribute_dto'}) {
        $_body_data = $args{'request_attribute_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_token_instance
#
# Create a new Token Instance
#
# @param TokenInstanceRequestDto $token_instance_request_dto  (required)
{
    my $params = {
    'token_instance_request_dto' => {
        data_type => 'TokenInstanceRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_token_instance' } = {
        summary => 'Create a new Token Instance',
        params => $params,
        returns => 'TokenInstanceDetailDto',
        };
}
# @return TokenInstanceDetailDto
#
sub create_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_request_dto' is set
    unless (exists $args{'token_instance_request_dto'}) {
      croak("Missing the required parameter 'token_instance_request_dto' when calling create_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'token_instance_request_dto'}) {
        $_body_data = $args{'token_instance_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenInstanceDetailDto', $response);
    return $_response_object;
}

#
# deactivate_token_instance
#
# Deactivate Token Instance
#
# @param string $uuid Token Instance UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deactivate_token_instance' } = {
        summary => 'Deactivate Token Instance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deactivate_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling deactivate_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}/deactivate';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_token_instance
#
# 
#
# @param string $uuid Token Instance UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_token_instance' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_token_instance1
#
# 
#
# @param ARRAY[string] $request_body Token Instance UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Token Instance UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_token_instance1' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_token_instance1 {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling delete_token_instance1");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/delete';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_token_instance
#
# Get Token Instance Detail
#
# @param string $uuid UUID of the Token Instance (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Instance',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_token_instance' } = {
        summary => 'Get Token Instance Detail',
        params => $params,
        returns => 'TokenInstanceDetailDto',
        };
}
# @return TokenInstanceDetailDto
#
sub get_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenInstanceDetailDto', $response);
    return $_response_object;
}

#
# list_token_instance_activation_attributes
#
# List Token activation Attributes
#
# @param string $uuid Token Instance UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_token_instance_activation_attributes' } = {
        summary => 'List Token activation Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_token_instance_activation_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling list_token_instance_activation_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}/activate/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_token_instances
#
# List Token Instances
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_token_instances' } = {
        summary => 'List Token Instances',
        params => $params,
        returns => 'ARRAY[TokenInstanceDto]',
        };
}
# @return ARRAY[TokenInstanceDto]
#
sub list_token_instances {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/tokens';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TokenInstanceDto]', $response);
    return $_response_object;
}

#
# list_token_profile_attributes
#
# List Token Profile Attributes
#
# @param string $uuid Token instance UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_token_profile_attributes' } = {
        summary => 'List Token Profile Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_token_profile_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling list_token_profile_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}/tokenProfiles/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# reload_status
#
# Reload Token Instance status
#
# @param string $uuid UUID of the Token Instance (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'UUID of the Token Instance',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reload_status' } = {
        summary => 'Reload Token Instance status',
        params => $params,
        returns => 'TokenInstanceDetailDto',
        };
}
# @return TokenInstanceDetailDto
#
sub reload_status {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling reload_status");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenInstanceDetailDto', $response);
    return $_response_object;
}

#
# update_token_instance
#
# Update Token Instance
#
# @param string $uuid Token Instance UUID (required)
# @param TokenInstanceRequestDto $token_instance_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_instance_request_dto' => {
        data_type => 'TokenInstanceRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_token_instance' } = {
        summary => 'Update Token Instance',
        params => $params,
        returns => 'TokenInstanceDetailDto',
        };
}
# @return TokenInstanceDetailDto
#
sub update_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_token_instance");
    }

    # verify the required parameter 'token_instance_request_dto' is set
    unless (exists $args{'token_instance_request_dto'}) {
      croak("Missing the required parameter 'token_instance_request_dto' when calling update_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'token_instance_request_dto'}) {
        $_body_data = $args{'token_instance_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenInstanceDetailDto', $response);
    return $_response_object;
}

1;
