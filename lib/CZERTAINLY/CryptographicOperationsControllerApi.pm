=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::CryptographicOperationsControllerApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# decrypt_data
#
# Decrypt data using a Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param CipherDataRequestDto $cipher_data_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'cipher_data_request_dto' => {
        data_type => 'CipherDataRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'decrypt_data' } = {
        summary => 'Decrypt data using a Key',
        params => $params,
        returns => 'DecryptDataResponseDto',
        };
}
# @return DecryptDataResponseDto
#
sub decrypt_data {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling decrypt_data");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling decrypt_data");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling decrypt_data");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling decrypt_data");
    }

    # verify the required parameter 'cipher_data_request_dto' is set
    unless (exists $args{'cipher_data_request_dto'}) {
      croak("Missing the required parameter 'cipher_data_request_dto' when calling decrypt_data");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/decrypt';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cipher_data_request_dto'}) {
        $_body_data = $args{'cipher_data_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DecryptDataResponseDto', $response);
    return $_response_object;
}

#
# encrypt_data
#
# Encrypt data using a Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param CipherDataRequestDto $cipher_data_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'cipher_data_request_dto' => {
        data_type => 'CipherDataRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'encrypt_data' } = {
        summary => 'Encrypt data using a Key',
        params => $params,
        returns => 'EncryptDataResponseDto',
        };
}
# @return EncryptDataResponseDto
#
sub encrypt_data {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling encrypt_data");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling encrypt_data");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling encrypt_data");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling encrypt_data");
    }

    # verify the required parameter 'cipher_data_request_dto' is set
    unless (exists $args{'cipher_data_request_dto'}) {
      croak("Missing the required parameter 'cipher_data_request_dto' when calling encrypt_data");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/encrypt';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cipher_data_request_dto'}) {
        $_body_data = $args{'cipher_data_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EncryptDataResponseDto', $response);
    return $_response_object;
}

#
# list_cipher_attributes
#
# List of cipher Attributes
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param KeyAlgorithm $algorithm Cryptographic algorithm (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'algorithm' => {
        data_type => 'KeyAlgorithm',
        description => 'Cryptographic algorithm',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_cipher_attributes' } = {
        summary => 'List of cipher Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_cipher_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling list_cipher_attributes");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling list_cipher_attributes");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling list_cipher_attributes");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling list_cipher_attributes");
    }

    # verify the required parameter 'algorithm' is set
    unless (exists $args{'algorithm'}) {
      croak("Missing the required parameter 'algorithm' when calling list_cipher_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/cipher/{algorithm}/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'algorithm'}) {
        my $_base_variable = "{" . "algorithm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'algorithm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_random_attributes
#
# List of random generator Attributes
#
# @param string $token_instance_uuid Token Instance UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_random_attributes' } = {
        summary => 'List of random generator Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_random_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling list_random_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/random/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# list_signature_attributes
#
# List of signature Attributes
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key instance UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param KeyAlgorithm $algorithm Cryptographic algorithm (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key instance UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'algorithm' => {
        data_type => 'KeyAlgorithm',
        description => 'Cryptographic algorithm',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_signature_attributes' } = {
        summary => 'List of signature Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub list_signature_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling list_signature_attributes");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling list_signature_attributes");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling list_signature_attributes");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling list_signature_attributes");
    }

    # verify the required parameter 'algorithm' is set
    unless (exists $args{'algorithm'}) {
      croak("Missing the required parameter 'algorithm' when calling list_signature_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/signature/{algorithm}/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'algorithm'}) {
        my $_base_variable = "{" . "algorithm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'algorithm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# random_data
#
# Generate random data
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param RandomDataRequestDto $random_data_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'random_data_request_dto' => {
        data_type => 'RandomDataRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_data' } = {
        summary => 'Generate random data',
        params => $params,
        returns => 'RandomDataResponseDto',
        };
}
# @return RandomDataResponseDto
#
sub random_data {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling random_data");
    }

    # verify the required parameter 'random_data_request_dto' is set
    unless (exists $args{'random_data_request_dto'}) {
      croak("Missing the required parameter 'random_data_request_dto' when calling random_data");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/random';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'random_data_request_dto'}) {
        $_body_data = $args{'random_data_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomDataResponseDto', $response);
    return $_response_object;
}

#
# sign_data
#
# Sign data using a Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param SignDataRequestDto $sign_data_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'sign_data_request_dto' => {
        data_type => 'SignDataRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sign_data' } = {
        summary => 'Sign data using a Key',
        params => $params,
        returns => 'SignDataResponseDto',
        };
}
# @return SignDataResponseDto
#
sub sign_data {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling sign_data");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling sign_data");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling sign_data");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling sign_data");
    }

    # verify the required parameter 'sign_data_request_dto' is set
    unless (exists $args{'sign_data_request_dto'}) {
      croak("Missing the required parameter 'sign_data_request_dto' when calling sign_data");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/sign';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'sign_data_request_dto'}) {
        $_body_data = $args{'sign_data_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SignDataResponseDto', $response);
    return $_response_object;
}

#
# verify_data
#
# Verify data using a Key
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param string $uuid Key UUID (required)
# @param string $key_item_uuid Key Item UUID (required)
# @param VerifyDataRequestDto $verify_data_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Key UUID',
        required => '1',
    },
    'key_item_uuid' => {
        data_type => 'string',
        description => 'Key Item UUID',
        required => '1',
    },
    'verify_data_request_dto' => {
        data_type => 'VerifyDataRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verify_data' } = {
        summary => 'Verify data using a Key',
        params => $params,
        returns => 'VerifyDataResponseDto',
        };
}
# @return VerifyDataResponseDto
#
sub verify_data {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling verify_data");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling verify_data");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling verify_data");
    }

    # verify the required parameter 'key_item_uuid' is set
    unless (exists $args{'key_item_uuid'}) {
      croak("Missing the required parameter 'key_item_uuid' when calling verify_data");
    }

    # verify the required parameter 'verify_data_request_dto' is set
    unless (exists $args{'verify_data_request_dto'}) {
      croak("Missing the required parameter 'verify_data_request_dto' when calling verify_data");
    }

    # parse inputs
    my $_resource_path = '/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/verify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'key_item_uuid'}) {
        my $_base_variable = "{" . "keyItemUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key_item_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'verify_data_request_dto'}) {
        $_body_data = $args{'verify_data_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VerifyDataResponseDto', $response);
    return $_response_object;
}

1;
