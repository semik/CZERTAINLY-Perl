=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CustomAttributesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_custom_attributes
#
# Delete multiple Custom Attributes
#
# @param ARRAY[string] $request_body Attribute UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Attribute UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_custom_attributes' } = {
        summary => 'Delete multiple Custom Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_delete_custom_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_custom_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_disable_custom_attributes
#
# Disable multiple Custom Attributes
#
# @param ARRAY[string] $request_body Attribute UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Attribute UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_disable_custom_attributes' } = {
        summary => 'Disable multiple Custom Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_disable_custom_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_disable_custom_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# bulk_enable_custom_attributes
#
# Enable multiple Custom Attributes
#
# @param ARRAY[string] $request_body Attribute UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Attribute UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_enable_custom_attributes' } = {
        summary => 'Enable multiple Custom Attributes',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_enable_custom_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_enable_custom_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_custom_attribute
#
# Create Custom Attribute
#
# @param CustomAttributeCreateRequestDto $custom_attribute_create_request_dto  (required)
{
    my $params = {
    'custom_attribute_create_request_dto' => {
        data_type => 'CustomAttributeCreateRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_custom_attribute' } = {
        summary => 'Create Custom Attribute',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'custom_attribute_create_request_dto' is set
    unless (exists $args{'custom_attribute_create_request_dto'}) {
      croak("Missing the required parameter 'custom_attribute_create_request_dto' when calling create_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'custom_attribute_create_request_dto'}) {
        $_body_data = $args{'custom_attribute_create_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_attribute_content_for_resource
#
# Delete Value of a Custom Attribute for a Resource
#
# @param Resource $resource_name Resource Type (required)
# @param string $object_uuid Object UUID (required)
# @param string $attribute_uuid Custom Attribute UUID (required)
{
    my $params = {
    'resource_name' => {
        data_type => 'Resource',
        description => 'Resource Type',
        required => '1',
    },
    'object_uuid' => {
        data_type => 'string',
        description => 'Object UUID',
        required => '1',
    },
    'attribute_uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_attribute_content_for_resource' } = {
        summary => 'Delete Value of a Custom Attribute for a Resource',
        params => $params,
        returns => 'ARRAY[ResponseAttributeDto]',
        };
}
# @return ARRAY[ResponseAttributeDto]
#
sub delete_attribute_content_for_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'resource_name' is set
    unless (exists $args{'resource_name'}) {
      croak("Missing the required parameter 'resource_name' when calling delete_attribute_content_for_resource");
    }

    # verify the required parameter 'object_uuid' is set
    unless (exists $args{'object_uuid'}) {
      croak("Missing the required parameter 'object_uuid' when calling delete_attribute_content_for_resource");
    }

    # verify the required parameter 'attribute_uuid' is set
    unless (exists $args{'attribute_uuid'}) {
      croak("Missing the required parameter 'attribute_uuid' when calling delete_attribute_content_for_resource");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/resources/{resourceName}/objects/{objectUuid}/{attributeUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'resource_name'}) {
        my $_base_variable = "{" . "resourceName" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_uuid'}) {
        my $_base_variable = "{" . "objectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attribute_uuid'}) {
        my $_base_variable = "{" . "attributeUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attribute_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ResponseAttributeDto]', $response);
    return $_response_object;
}

#
# delete_custom_attribute
#
# Delete Custom Attribute
#
# @param string $uuid Custom Attribute UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_custom_attribute' } = {
        summary => 'Delete Custom Attribute',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_custom_attribute
#
# Disable Custom Attribute
#
# @param string $uuid Custom Attribute UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_custom_attribute' } = {
        summary => 'Disable Custom Attribute',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_custom_attribute
#
# Edit Custom Attribute
#
# @param string $uuid Attribute UUID (required)
# @param CustomAttributeUpdateRequestDto $custom_attribute_update_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Attribute UUID',
        required => '1',
    },
    'custom_attribute_update_request_dto' => {
        data_type => 'CustomAttributeUpdateRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_custom_attribute' } = {
        summary => 'Edit Custom Attribute',
        params => $params,
        returns => 'CustomAttributeDefinitionDetailDto',
        };
}
# @return CustomAttributeDefinitionDetailDto
#
sub edit_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_custom_attribute");
    }

    # verify the required parameter 'custom_attribute_update_request_dto' is set
    unless (exists $args{'custom_attribute_update_request_dto'}) {
      croak("Missing the required parameter 'custom_attribute_update_request_dto' when calling edit_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'custom_attribute_update_request_dto'}) {
        $_body_data = $args{'custom_attribute_update_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomAttributeDefinitionDetailDto', $response);
    return $_response_object;
}

#
# enable_custom_attribute
#
# Enable Custom Attribute
#
# @param string $uuid Custom Attribute UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_custom_attribute' } = {
        summary => 'Enable Custom Attribute',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_custom_attribute
#
# Custom Attribute details
#
# @param string $uuid  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_custom_attribute' } = {
        summary => 'Custom Attribute details',
        params => $params,
        returns => 'CustomAttributeDefinitionDetailDto',
        };
}
# @return CustomAttributeDefinitionDetailDto
#
sub get_custom_attribute {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_custom_attribute");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomAttributeDefinitionDetailDto', $response);
    return $_response_object;
}

#
# get_resource_custom_attributes
#
# Get Custom Attributes for a resource
#
# @param Resource $resource Resource Name (required)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => 'Resource Name',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_resource_custom_attributes' } = {
        summary => 'Get Custom Attributes for a resource',
        params => $params,
        returns => 'ARRAY[CustomAttribute]',
        };
}
# @return ARRAY[CustomAttribute]
#
sub get_resource_custom_attributes {
    my ($self, %args) = @_;

    # verify the required parameter 'resource' is set
    unless (exists $args{'resource'}) {
      croak("Missing the required parameter 'resource' when calling get_resource_custom_attributes");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/resources/{resource}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'resource'}) {
        my $_base_variable = "{" . "resource" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CustomAttribute]', $response);
    return $_response_object;
}

#
# get_resources
#
# Get available resources for Custom Attributes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_resources' } = {
        summary => 'Get available resources for Custom Attributes',
        params => $params,
        returns => 'ARRAY[Resource]',
        };
}
# @return ARRAY[Resource]
#
sub get_resources {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/resources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Resource]', $response);
    return $_response_object;
}

#
# list_custom_attributes
#
# List Custom Attributes
#
# @param AttributeContentType $attribute_content_type  (optional)
{
    my $params = {
    'attribute_content_type' => {
        data_type => 'AttributeContentType',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_custom_attributes' } = {
        summary => 'List Custom Attributes',
        params => $params,
        returns => 'ARRAY[CustomAttributeDefinitionDto]',
        };
}
# @return ARRAY[CustomAttributeDefinitionDto]
#
sub list_custom_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/attributes/custom';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attribute_content_type'}) {
        $query_params->{'attributeContentType'} = $self->{api_client}->to_query_value($args{'attribute_content_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CustomAttributeDefinitionDto]', $response);
    return $_response_object;
}

#
# update_attribute_content_for_resource
#
# Update Value of a Custom Attribute for a Resource
#
# @param Resource $resource_name Resource Type (required)
# @param string $object_uuid Object UUID (required)
# @param string $attribute_uuid Custom Attribute UUID (required)
# @param ARRAY[BaseAttributeContentDto] $base_attribute_content_dto  (required)
{
    my $params = {
    'resource_name' => {
        data_type => 'Resource',
        description => 'Resource Type',
        required => '1',
    },
    'object_uuid' => {
        data_type => 'string',
        description => 'Object UUID',
        required => '1',
    },
    'attribute_uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    'base_attribute_content_dto' => {
        data_type => 'ARRAY[BaseAttributeContentDto]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_attribute_content_for_resource' } = {
        summary => 'Update Value of a Custom Attribute for a Resource',
        params => $params,
        returns => 'ARRAY[ResponseAttributeDto]',
        };
}
# @return ARRAY[ResponseAttributeDto]
#
sub update_attribute_content_for_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'resource_name' is set
    unless (exists $args{'resource_name'}) {
      croak("Missing the required parameter 'resource_name' when calling update_attribute_content_for_resource");
    }

    # verify the required parameter 'object_uuid' is set
    unless (exists $args{'object_uuid'}) {
      croak("Missing the required parameter 'object_uuid' when calling update_attribute_content_for_resource");
    }

    # verify the required parameter 'attribute_uuid' is set
    unless (exists $args{'attribute_uuid'}) {
      croak("Missing the required parameter 'attribute_uuid' when calling update_attribute_content_for_resource");
    }

    # verify the required parameter 'base_attribute_content_dto' is set
    unless (exists $args{'base_attribute_content_dto'}) {
      croak("Missing the required parameter 'base_attribute_content_dto' when calling update_attribute_content_for_resource");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/resources/{resourceName}/objects/{objectUuid}/{attributeUuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'resource_name'}) {
        my $_base_variable = "{" . "resourceName" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'object_uuid'}) {
        my $_base_variable = "{" . "objectUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'object_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'attribute_uuid'}) {
        my $_base_variable = "{" . "attributeUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attribute_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'base_attribute_content_dto'}) {
        $_body_data = $args{'base_attribute_content_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ResponseAttributeDto]', $response);
    return $_response_object;
}

#
# update_resources
#
# Associate Custom Attribute to Resource
#
# @param string $uuid Custom Attribute UUID (required)
# @param ARRAY[string] $request_body List of Resources (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Custom Attribute UUID',
        required => '1',
    },
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'List of Resources',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_resources' } = {
        summary => 'Associate Custom Attribute to Resource',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_resources {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_resources");
    }

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling update_resources");
    }

    # parse inputs
    my $_resource_path = '/v1/attributes/custom/{uuid}/resources';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
