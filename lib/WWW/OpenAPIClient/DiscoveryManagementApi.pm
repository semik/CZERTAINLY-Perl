=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DiscoveryManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_discovery
#
# Delete Multiple Discoveries
#
# @param ARRAY[string] $request_body Discovery UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Discovery UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_discovery' } = {
        summary => 'Delete Multiple Discoveries',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_delete_discovery {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling bulk_delete_discovery");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_discovery
#
# Create Discovery
#
# @param DiscoveryDto $discovery_dto  (required)
{
    my $params = {
    'discovery_dto' => {
        data_type => 'DiscoveryDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_discovery' } = {
        summary => 'Create Discovery',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub create_discovery {
    my ($self, %args) = @_;

    # verify the required parameter 'discovery_dto' is set
    unless (exists $args{'discovery_dto'}) {
      croak("Missing the required parameter 'discovery_dto' when calling create_discovery");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'discovery_dto'}) {
        $_body_data = $args{'discovery_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

#
# delete_discovery
#
# Delete Discovery
#
# @param string $uuid Discovery UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Discovery UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_discovery' } = {
        summary => 'Delete Discovery',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_discovery {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_discovery");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_discovery
#
# Discovery Details
#
# @param string $uuid Discovery UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Discovery UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_discovery' } = {
        summary => 'Discovery Details',
        params => $params,
        returns => 'DiscoveryHistoryDetailDto',
        };
}
# @return DiscoveryHistoryDetailDto
#
sub get_discovery {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_discovery");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DiscoveryHistoryDetailDto', $response);
    return $_response_object;
}

#
# get_discovery_certificates
#
# Discovery Details
#
# @param string $uuid Discovery UUID (required)
# @param boolean $newly_discovered  (optional)
# @param int $items_per_page  (optional, default to 10)
# @param int $page_number  (optional, default to 0)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Discovery UUID',
        required => '1',
    },
    'newly_discovered' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'items_per_page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'page_number' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_discovery_certificates' } = {
        summary => 'Discovery Details',
        params => $params,
        returns => 'DiscoveryCertificateResponseDto',
        };
}
# @return DiscoveryCertificateResponseDto
#
sub get_discovery_certificates {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_discovery_certificates");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries/{uuid}/certificates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'newly_discovered'}) {
        $query_params->{'newlyDiscovered'} = $self->{api_client}->to_query_value($args{'newly_discovered'});
    }

    # query params
    if ( exists $args{'items_per_page'}) {
        $query_params->{'itemsPerPage'} = $self->{api_client}->to_query_value($args{'items_per_page'});
    }

    # query params
    if ( exists $args{'page_number'}) {
        $query_params->{'pageNumber'} = $self->{api_client}->to_query_value($args{'page_number'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DiscoveryCertificateResponseDto', $response);
    return $_response_object;
}

#
# get_searchable_field_information3
#
# Get Discovery searchable fields information
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_searchable_field_information3' } = {
        summary => 'Get Discovery searchable fields information',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub get_searchable_field_information3 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/discoveries/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# list_discoveries
#
# List Discovery
#
# @param SearchRequestDto $search_request_dto  (required)
{
    my $params = {
    'search_request_dto' => {
        data_type => 'SearchRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_discoveries' } = {
        summary => 'List Discovery',
        params => $params,
        returns => 'DiscoveryResponseDto',
        };
}
# @return DiscoveryResponseDto
#
sub list_discoveries {
    my ($self, %args) = @_;

    # verify the required parameter 'search_request_dto' is set
    unless (exists $args{'search_request_dto'}) {
      croak("Missing the required parameter 'search_request_dto' when calling list_discoveries");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries/list';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_request_dto'}) {
        $_body_data = $args{'search_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DiscoveryResponseDto', $response);
    return $_response_object;
}

#
# schedule_discovery
#
# Schedule Discovery
#
# @param ScheduleDiscoveryDto $schedule_discovery_dto  (required)
{
    my $params = {
    'schedule_discovery_dto' => {
        data_type => 'ScheduleDiscoveryDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'schedule_discovery' } = {
        summary => 'Schedule Discovery',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub schedule_discovery {
    my ($self, %args) = @_;

    # verify the required parameter 'schedule_discovery_dto' is set
    unless (exists $args{'schedule_discovery_dto'}) {
      croak("Missing the required parameter 'schedule_discovery_dto' when calling schedule_discovery");
    }

    # parse inputs
    my $_resource_path = '/v1/discoveries/schedule';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'schedule_discovery_dto'}) {
        $_body_data = $args{'schedule_discovery_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

1;
