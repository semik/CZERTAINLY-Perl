=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::TokenProfileManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_token_profile
#
# Create Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param AddTokenProfileRequestDto $add_token_profile_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'add_token_profile_request_dto' => {
        data_type => 'AddTokenProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_token_profile' } = {
        summary => 'Create Token Profile',
        params => $params,
        returns => 'TokenProfileDetailDto',
        };
}
# @return TokenProfileDetailDto
#
sub create_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling create_token_profile");
    }

    # verify the required parameter 'add_token_profile_request_dto' is set
    unless (exists $args{'add_token_profile_request_dto'}) {
      croak("Missing the required parameter 'add_token_profile_request_dto' when calling create_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_token_profile_request_dto'}) {
        $_body_data = $args{'add_token_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenProfileDetailDto', $response);
    return $_response_object;
}

#
# delete_ra_profile_without_token_instance
#
# Delete Token Profile
#
# @param string $uuid Token Profile UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_ra_profile_without_token_instance' } = {
        summary => 'Delete Token Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_ra_profile_without_token_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_ra_profile_without_token_instance");
    }

    # parse inputs
    my $_resource_path = '/v1/tokenProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_token_profile
#
# Delete Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Token Profile UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_token_profile' } = {
        summary => 'Delete Token Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling delete_token_profile");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_token_profiles
#
# Delete multiple Token Profiles
#
# @param ARRAY[string] $request_body Token Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Token Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_token_profiles' } = {
        summary => 'Delete multiple Token Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_token_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling delete_token_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/tokenProfiles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_token_profile
#
# Disable Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Token Profile UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_token_profile' } = {
        summary => 'Disable Token Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling disable_token_profile");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling disable_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# disable_token_profiles
#
# Disable multiple Token Profiles
#
# @param ARRAY[string] $request_body Token Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Token Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'disable_token_profiles' } = {
        summary => 'Disable multiple Token Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub disable_token_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling disable_token_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/tokenProfiles/disable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# edit_token_profile
#
# Edit Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Token Profile UUID (required)
# @param EditTokenProfileRequestDto $edit_token_profile_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'edit_token_profile_request_dto' => {
        data_type => 'EditTokenProfileRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'edit_token_profile' } = {
        summary => 'Edit Token Profile',
        params => $params,
        returns => 'TokenProfileDetailDto',
        };
}
# @return TokenProfileDetailDto
#
sub edit_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling edit_token_profile");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling edit_token_profile");
    }

    # verify the required parameter 'edit_token_profile_request_dto' is set
    unless (exists $args{'edit_token_profile_request_dto'}) {
      croak("Missing the required parameter 'edit_token_profile_request_dto' when calling edit_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'edit_token_profile_request_dto'}) {
        $_body_data = $args{'edit_token_profile_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenProfileDetailDto', $response);
    return $_response_object;
}

#
# enable_token_profile
#
# Enable Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Token Profile UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_token_profile' } = {
        summary => 'Enable Token Profile',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling enable_token_profile");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling enable_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# enable_token_profiles
#
# Enable multiple Token Profiles
#
# @param ARRAY[string] $request_body Token Profile UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Token Profile UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'enable_token_profiles' } = {
        summary => 'Enable multiple Token Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub enable_token_profiles {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling enable_token_profiles");
    }

    # parse inputs
    my $_resource_path = '/v1/tokenProfiles/enable';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_token_profile
#
# Details of Token Profile
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $uuid Token Profile UUID (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_token_profile' } = {
        summary => 'Details of Token Profile',
        params => $params,
        returns => 'TokenProfileDetailDto',
        };
}
# @return TokenProfileDetailDto
#
sub get_token_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling get_token_profile");
    }

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_token_profile");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TokenProfileDetailDto', $response);
    return $_response_object;
}

#
# list_token_profiles
#
# List of available Token Profiles
#
# @param boolean $enabled  (optional)
{
    my $params = {
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_token_profiles' } = {
        summary => 'List of available Token Profiles',
        params => $params,
        returns => 'ARRAY[TokenProfileDto]',
        };
}
# @return ARRAY[TokenProfileDto]
#
sub list_token_profiles {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/tokenProfiles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TokenProfileDto]', $response);
    return $_response_object;
}

#
# update_key_usages
#
# Update Key Usage
#
# @param string $token_instance_uuid Token Instance UUID (required)
# @param string $token_profile_uuid Token Profile UUID (required)
# @param TokenProfileKeyUsageRequestDto $token_profile_key_usage_request_dto  (required)
{
    my $params = {
    'token_instance_uuid' => {
        data_type => 'string',
        description => 'Token Instance UUID',
        required => '1',
    },
    'token_profile_uuid' => {
        data_type => 'string',
        description => 'Token Profile UUID',
        required => '1',
    },
    'token_profile_key_usage_request_dto' => {
        data_type => 'TokenProfileKeyUsageRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_key_usages' } = {
        summary => 'Update Key Usage',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_key_usages {
    my ($self, %args) = @_;

    # verify the required parameter 'token_instance_uuid' is set
    unless (exists $args{'token_instance_uuid'}) {
      croak("Missing the required parameter 'token_instance_uuid' when calling update_key_usages");
    }

    # verify the required parameter 'token_profile_uuid' is set
    unless (exists $args{'token_profile_uuid'}) {
      croak("Missing the required parameter 'token_profile_uuid' when calling update_key_usages");
    }

    # verify the required parameter 'token_profile_key_usage_request_dto' is set
    unless (exists $args{'token_profile_key_usage_request_dto'}) {
      croak("Missing the required parameter 'token_profile_key_usage_request_dto' when calling update_key_usages");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/usages';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'token_instance_uuid'}) {
        my $_base_variable = "{" . "tokenInstanceUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_instance_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'token_profile_uuid'}) {
        my $_base_variable = "{" . "tokenProfileUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'token_profile_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'token_profile_key_usage_request_dto'}) {
        $_body_data = $args{'token_profile_key_usage_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_keys_usages
#
# Update Key Usages for Multiple Token Profiles
#
# @param BulkTokenProfileKeyUsageRequestDto $bulk_token_profile_key_usage_request_dto  (required)
{
    my $params = {
    'bulk_token_profile_key_usage_request_dto' => {
        data_type => 'BulkTokenProfileKeyUsageRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_keys_usages' } = {
        summary => 'Update Key Usages for Multiple Token Profiles',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_keys_usages {
    my ($self, %args) = @_;

    # verify the required parameter 'bulk_token_profile_key_usage_request_dto' is set
    unless (exists $args{'bulk_token_profile_key_usage_request_dto'}) {
      croak("Missing the required parameter 'bulk_token_profile_key_usage_request_dto' when calling update_keys_usages");
    }

    # parse inputs
    my $_resource_path = '/v1/tokens/usages';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'bulk_token_profile_key_usage_request_dto'}) {
        $_body_data = $args{'bulk_token_profile_key_usage_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
