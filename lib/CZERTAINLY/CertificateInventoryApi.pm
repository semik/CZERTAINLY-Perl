=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::CertificateInventoryApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# bulk_delete_certificate
#
# Delete multiple certificates
#
# @param RemoveCertificateDto $remove_certificate_dto  (required)
{
    my $params = {
    'remove_certificate_dto' => {
        data_type => 'RemoveCertificateDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_delete_certificate' } = {
        summary => 'Delete multiple certificates',
        params => $params,
        returns => 'BulkOperationResponse',
        };
}
# @return BulkOperationResponse
#
sub bulk_delete_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'remove_certificate_dto' is set
    unless (exists $args{'remove_certificate_dto'}) {
      croak("Missing the required parameter 'remove_certificate_dto' when calling bulk_delete_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'remove_certificate_dto'}) {
        $_body_data = $args{'remove_certificate_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BulkOperationResponse', $response);
    return $_response_object;
}

#
# bulk_update_certificate_objects
#
# Update Group and/or Owner for multiple Certificates
#
# @param MultipleCertificateObjectUpdateDto $multiple_certificate_object_update_dto  (required)
{
    my $params = {
    'multiple_certificate_object_update_dto' => {
        data_type => 'MultipleCertificateObjectUpdateDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'bulk_update_certificate_objects' } = {
        summary => 'Update Group and/or Owner for multiple Certificates',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub bulk_update_certificate_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'multiple_certificate_object_update_dto' is set
    unless (exists $args{'multiple_certificate_object_update_dto'}) {
      croak("Missing the required parameter 'multiple_certificate_object_update_dto' when calling bulk_update_certificate_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'multiple_certificate_object_update_dto'}) {
        $_body_data = $args{'multiple_certificate_object_update_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# check_certificates_compliance
#
# Initiate Certificate Compliance Check
#
# @param CertificateComplianceCheckDto $certificate_compliance_check_dto  (required)
{
    my $params = {
    'certificate_compliance_check_dto' => {
        data_type => 'CertificateComplianceCheckDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_certificates_compliance' } = {
        summary => 'Initiate Certificate Compliance Check',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub check_certificates_compliance {
    my ($self, %args) = @_;

    # verify the required parameter 'certificate_compliance_check_dto' is set
    unless (exists $args{'certificate_compliance_check_dto'}) {
      croak("Missing the required parameter 'certificate_compliance_check_dto' when calling check_certificates_compliance");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/compliance';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'certificate_compliance_check_dto'}) {
        $_body_data = $args{'certificate_compliance_check_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_certificate
#
# Delete a certificate
#
# @param string $uuid Certificate UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_certificate' } = {
        summary => 'Delete a certificate',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling delete_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# download_certificate
#
# Download Certificate
#
# @param string $uuid Certificate UUID (required)
# @param CertificateFormat $certificate_format Certificate format (required)
# @param CertificateFormatEncoding $encoding  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'certificate_format' => {
        data_type => 'CertificateFormat',
        description => 'Certificate format',
        required => '1',
    },
    'encoding' => {
        data_type => 'CertificateFormatEncoding',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'download_certificate' } = {
        summary => 'Download Certificate',
        params => $params,
        returns => 'CertificateDownloadResponseDto',
        };
}
# @return CertificateDownloadResponseDto
#
sub download_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling download_certificate");
    }

    # verify the required parameter 'certificate_format' is set
    unless (exists $args{'certificate_format'}) {
      croak("Missing the required parameter 'certificate_format' when calling download_certificate");
    }

    # verify the required parameter 'encoding' is set
    unless (exists $args{'encoding'}) {
      croak("Missing the required parameter 'encoding' when calling download_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/{certificateFormat}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'encoding'}) {
        $query_params->{'encoding'} = $self->{api_client}->to_query_value($args{'encoding'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_format'}) {
        my $_base_variable = "{" . "certificateFormat" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_format'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateDownloadResponseDto', $response);
    return $_response_object;
}

#
# download_certificate_chain
#
# Download Certificate Chain in chosen format
#
# @param string $uuid Certificate UUID (required)
# @param CertificateFormat $certificate_format Certificate format (required)
# @param CertificateFormatEncoding $encoding  (required)
# @param boolean $with_end_certificate  (optional)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'certificate_format' => {
        data_type => 'CertificateFormat',
        description => 'Certificate format',
        required => '1',
    },
    'encoding' => {
        data_type => 'CertificateFormatEncoding',
        description => '',
        required => '1',
    },
    'with_end_certificate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'download_certificate_chain' } = {
        summary => 'Download Certificate Chain in chosen format',
        params => $params,
        returns => 'CertificateChainDownloadResponseDto',
        };
}
# @return CertificateChainDownloadResponseDto
#
sub download_certificate_chain {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling download_certificate_chain");
    }

    # verify the required parameter 'certificate_format' is set
    unless (exists $args{'certificate_format'}) {
      croak("Missing the required parameter 'certificate_format' when calling download_certificate_chain");
    }

    # verify the required parameter 'encoding' is set
    unless (exists $args{'encoding'}) {
      croak("Missing the required parameter 'encoding' when calling download_certificate_chain");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/chain/{certificateFormat}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'with_end_certificate'}) {
        $query_params->{'withEndCertificate'} = $self->{api_client}->to_query_value($args{'with_end_certificate'});
    }

    # query params
    if ( exists $args{'encoding'}) {
        $query_params->{'encoding'} = $self->{api_client}->to_query_value($args{'encoding'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'certificate_format'}) {
        my $_base_variable = "{" . "certificateFormat" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_format'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateChainDownloadResponseDto', $response);
    return $_response_object;
}

#
# get_certificate
#
# Get Certificate Details
#
# @param string $uuid Certificate UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_certificate' } = {
        summary => 'Get Certificate Details',
        params => $params,
        returns => 'CertificateDetailDto',
        };
}
# @return CertificateDetailDto
#
sub get_certificate {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_certificate");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateDetailDto', $response);
    return $_response_object;
}

#
# get_certificate_chain
#
# Get certificate chain
#
# @param string $uuid Certificate UUID (required)
# @param boolean $with_end_certificate  (optional)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'with_end_certificate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_certificate_chain' } = {
        summary => 'Get certificate chain',
        params => $params,
        returns => 'CertificateChainResponseDto',
        };
}
# @return CertificateChainResponseDto
#
sub get_certificate_chain {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_certificate_chain");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/chain';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'with_end_certificate'}) {
        $query_params->{'withEndCertificate'} = $self->{api_client}->to_query_value($args{'with_end_certificate'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateChainResponseDto', $response);
    return $_response_object;
}

#
# get_certificate_content
#
# Get Certificate Content
#
# @param ARRAY[string] $request_body Certificate UUIDs (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Certificate UUIDs',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_certificate_content' } = {
        summary => 'Get Certificate Content',
        params => $params,
        returns => 'ARRAY[CertificateContentDto]',
        };
}
# @return ARRAY[CertificateContentDto]
#
sub get_certificate_content {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling get_certificate_content");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/content';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CertificateContentDto]', $response);
    return $_response_object;
}

#
# get_certificate_event_history
#
# Get Certificate event history
#
# @param string $uuid Certificate UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_certificate_event_history' } = {
        summary => 'Get Certificate event history',
        params => $params,
        returns => 'ARRAY[CertificateEventHistoryDto]',
        };
}
# @return ARRAY[CertificateEventHistoryDto]
#
sub get_certificate_event_history {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_certificate_event_history");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CertificateEventHistoryDto]', $response);
    return $_response_object;
}

#
# get_certificate_validation_result
#
# Get Certificate Validation Result
#
# @param string $uuid Certificate UUID (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_certificate_validation_result' } = {
        summary => 'Get Certificate Validation Result',
        params => $params,
        returns => 'CertificateValidationResultDto',
        };
}
# @return CertificateValidationResultDto
#
sub get_certificate_validation_result {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling get_certificate_validation_result");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/validate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateValidationResultDto', $response);
    return $_response_object;
}

#
# get_csr_generation_attributes
#
# Get CSR Generation Attributes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_csr_generation_attributes' } = {
        summary => 'Get CSR Generation Attributes',
        params => $params,
        returns => 'ARRAY[BaseAttributeDto]',
        };
}
# @return ARRAY[BaseAttributeDto]
#
sub get_csr_generation_attributes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/certificates/csr/attributes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BaseAttributeDto]', $response);
    return $_response_object;
}

#
# get_searchable_field_information4
#
# Get Certificate searchable fields information
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_searchable_field_information4' } = {
        summary => 'Get Certificate searchable fields information',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub get_searchable_field_information4 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/certificates/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# list_certificate_approvals
#
# List Certificates Approvals
#
# @param string $uuid Certificate UUID (required)
# @param PaginationRequestDto $pagination_request_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'pagination_request_dto' => {
        data_type => 'PaginationRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_certificate_approvals' } = {
        summary => 'List Certificates Approvals',
        params => $params,
        returns => 'ApprovalResponseDto',
        };
}
# @return ApprovalResponseDto
#
sub list_certificate_approvals {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling list_certificate_approvals");
    }

    # verify the required parameter 'pagination_request_dto' is set
    unless (exists $args{'pagination_request_dto'}) {
      croak("Missing the required parameter 'pagination_request_dto' when calling list_certificate_approvals");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}/approvals';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pagination_request_dto'}) {
        $query_params->{'paginationRequestDto'} = $self->{api_client}->to_query_value($args{'pagination_request_dto'});
    }

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApprovalResponseDto', $response);
    return $_response_object;
}

#
# list_certificate_locations
#
# List of available Locations for the Certificate
#
# @param string $certificate_uuid Certificate UUID (required)
{
    my $params = {
    'certificate_uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_certificate_locations' } = {
        summary => 'List of available Locations for the Certificate',
        params => $params,
        returns => 'ARRAY[LocationDto]',
        };
}
# @return ARRAY[LocationDto]
#
sub list_certificate_locations {
    my ($self, %args) = @_;

    # verify the required parameter 'certificate_uuid' is set
    unless (exists $args{'certificate_uuid'}) {
      croak("Missing the required parameter 'certificate_uuid' when calling list_certificate_locations");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{certificateUuid}/locations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'certificate_uuid'}) {
        my $_base_variable = "{" . "certificateUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'certificate_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[LocationDto]', $response);
    return $_response_object;
}

#
# list_certificates
#
# List Certificates
#
# @param SearchRequestDto $search_request_dto  (required)
{
    my $params = {
    'search_request_dto' => {
        data_type => 'SearchRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_certificates' } = {
        summary => 'List Certificates',
        params => $params,
        returns => 'CertificateResponseDto',
        };
}
# @return CertificateResponseDto
#
sub list_certificates {
    my ($self, %args) = @_;

    # verify the required parameter 'search_request_dto' is set
    unless (exists $args{'search_request_dto'}) {
      croak("Missing the required parameter 'search_request_dto' when calling list_certificates");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'search_request_dto'}) {
        $_body_data = $args{'search_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateResponseDto', $response);
    return $_response_object;
}

#
# submit_certificate_request
#
# Submit certificate request
#
# @param ClientCertificateRequestDto $client_certificate_request_dto  (required)
{
    my $params = {
    'client_certificate_request_dto' => {
        data_type => 'ClientCertificateRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'submit_certificate_request' } = {
        summary => 'Submit certificate request',
        params => $params,
        returns => 'CertificateDetailDto',
        };
}
# @return CertificateDetailDto
#
sub submit_certificate_request {
    my ($self, %args) = @_;

    # verify the required parameter 'client_certificate_request_dto' is set
    unless (exists $args{'client_certificate_request_dto'}) {
      croak("Missing the required parameter 'client_certificate_request_dto' when calling submit_certificate_request");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/create';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'client_certificate_request_dto'}) {
        $_body_data = $args{'client_certificate_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CertificateDetailDto', $response);
    return $_response_object;
}

#
# update_certificate_objects
#
# Update Certificate Objects
#
# @param string $uuid Certificate UUID (required)
# @param CertificateUpdateObjectsDto $certificate_update_objects_dto  (required)
{
    my $params = {
    'uuid' => {
        data_type => 'string',
        description => 'Certificate UUID',
        required => '1',
    },
    'certificate_update_objects_dto' => {
        data_type => 'CertificateUpdateObjectsDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_certificate_objects' } = {
        summary => 'Update Certificate Objects',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_certificate_objects {
    my ($self, %args) = @_;

    # verify the required parameter 'uuid' is set
    unless (exists $args{'uuid'}) {
      croak("Missing the required parameter 'uuid' when calling update_certificate_objects");
    }

    # verify the required parameter 'certificate_update_objects_dto' is set
    unless (exists $args{'certificate_update_objects_dto'}) {
      croak("Missing the required parameter 'certificate_update_objects_dto' when calling update_certificate_objects");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/{uuid}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'uuid'}) {
        my $_base_variable = "{" . "uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'certificate_update_objects_dto'}) {
        $_body_data = $args{'certificate_update_objects_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# upload
#
# Upload a new Certificate
#
# @param UploadCertificateRequestDto $upload_certificate_request_dto  (required)
{
    my $params = {
    'upload_certificate_request_dto' => {
        data_type => 'UploadCertificateRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload' } = {
        summary => 'Upload a new Certificate',
        params => $params,
        returns => 'UuidDto',
        };
}
# @return UuidDto
#
sub upload {
    my ($self, %args) = @_;

    # verify the required parameter 'upload_certificate_request_dto' is set
    unless (exists $args{'upload_certificate_request_dto'}) {
      croak("Missing the required parameter 'upload_certificate_request_dto' when calling upload");
    }

    # parse inputs
    my $_resource_path = '/v1/certificates/upload';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'upload_certificate_request_dto'}) {
        $_body_data = $args{'upload_certificate_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UuidDto', $response);
    return $_response_object;
}

1;
