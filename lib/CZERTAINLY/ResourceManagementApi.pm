=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::ResourceManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# list_resource_events
#
# Retrieve a list of all events that can be triggered by a resource
#
# @param Resource $resource Resource (required)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => 'Resource',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_resource_events' } = {
        summary => 'Retrieve a list of all events that can be triggered by a resource',
        params => $params,
        returns => 'ARRAY[ResourceEventDto]',
        };
}
# @return ARRAY[ResourceEventDto]
#
sub list_resource_events {
    my ($self, %args) = @_;

    # verify the required parameter 'resource' is set
    unless (exists $args{'resource'}) {
      croak("Missing the required parameter 'resource' when calling list_resource_events");
    }

    # parse inputs
    my $_resource_path = '/v1/resources/{resource}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'resource'}) {
        my $_base_variable = "{" . "resource" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ResourceEventDto]', $response);
    return $_response_object;
}

#
# list_resource_rule_filter_fields
#
# Retrieve filter fields that can be used for creating rule conditions and actions
#
# @param Resource $resource Resource (required)
# @param boolean $settable  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => 'Resource',
        required => '1',
    },
    'settable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_resource_rule_filter_fields' } = {
        summary => 'Retrieve filter fields that can be used for creating rule conditions and actions',
        params => $params,
        returns => 'ARRAY[SearchFieldDataByGroupDto]',
        };
}
# @return ARRAY[SearchFieldDataByGroupDto]
#
sub list_resource_rule_filter_fields {
    my ($self, %args) = @_;

    # verify the required parameter 'resource' is set
    unless (exists $args{'resource'}) {
      croak("Missing the required parameter 'resource' when calling list_resource_rule_filter_fields");
    }

    # parse inputs
    my $_resource_path = '/v1/resources/{resource}/filters/rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'settable'}) {
        $query_params->{'settable'} = $self->{api_client}->to_query_value($args{'settable'});
    }

    # path params
    if ( exists $args{'resource'}) {
        my $_base_variable = "{" . "resource" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'resource'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchFieldDataByGroupDto]', $response);
    return $_response_object;
}

#
# list_resources
#
# Retrieve list of resources with information and settings
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_resources' } = {
        summary => 'Retrieve list of resources with information and settings',
        params => $params,
        returns => 'ARRAY[ResourceDto]',
        };
}
# @return ARRAY[ResourceDto]
#
sub list_resources {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/resources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ResourceDto]', $response);
    return $_response_object;
}

1;
