=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::Object::CertificateDetailDto;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use CZERTAINLY::Object::CertificateComplianceResultDto;
use CZERTAINLY::Object::CertificateDto;
use CZERTAINLY::Object::CertificateProtocolDto;
use CZERTAINLY::Object::CertificateRequestDto;
use CZERTAINLY::Object::CertificateState;
use CZERTAINLY::Object::CertificateSubjectType;
use CZERTAINLY::Object::CertificateType;
use CZERTAINLY::Object::CertificateValidationStatus;
use CZERTAINLY::Object::ComplianceStatus;
use CZERTAINLY::Object::GroupDto;
use CZERTAINLY::Object::KeyDto;
use CZERTAINLY::Object::LocationDto;
use CZERTAINLY::Object::MetadataResponseDto;
use CZERTAINLY::Object::ResponseAttributeDto;
use CZERTAINLY::Object::SimplifiedRaProfileDto;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "CZERTAINLY::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'CertificateDetailDto',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'uuid' => {
        datatype => 'string',
        base_name => 'uuid',
        description => 'UUID of the Certificate',
        format => '',
        read_only => '',
            },
    'common_name' => {
        datatype => 'string',
        base_name => 'commonName',
        description => 'Certificate common name',
        format => '',
        read_only => '',
            },
    'serial_number' => {
        datatype => 'string',
        base_name => 'serialNumber',
        description => 'Certificate serial number',
        format => '',
        read_only => '',
            },
    'issuer_common_name' => {
        datatype => 'string',
        base_name => 'issuerCommonName',
        description => 'Certificate issuer common name',
        format => '',
        read_only => '',
            },
    'issuer_dn' => {
        datatype => 'string',
        base_name => 'issuerDn',
        description => 'Issuer DN of the Certificate',
        format => '',
        read_only => '',
            },
    'subject_dn' => {
        datatype => 'string',
        base_name => 'subjectDn',
        description => 'Subject DN of the Certificate',
        format => '',
        read_only => '',
            },
    'not_before' => {
        datatype => 'DATE_TIME',
        base_name => 'notBefore',
        description => 'Certificate validity start date',
        format => '',
        read_only => '',
            },
    'not_after' => {
        datatype => 'DATE_TIME',
        base_name => 'notAfter',
        description => 'Certificate expiration date',
        format => '',
        read_only => '',
            },
    'public_key_algorithm' => {
        datatype => 'string',
        base_name => 'publicKeyAlgorithm',
        description => 'Public key algorithm',
        format => '',
        read_only => '',
            },
    'signature_algorithm' => {
        datatype => 'string',
        base_name => 'signatureAlgorithm',
        description => 'Certificate signature algorithm',
        format => '',
        read_only => '',
            },
    'key_size' => {
        datatype => 'int',
        base_name => 'keySize',
        description => 'Certificate key size',
        format => '',
        read_only => '',
            },
    'state' => {
        datatype => 'CertificateState',
        base_name => 'state',
        description => '',
        format => '',
        read_only => '',
            },
    'validation_status' => {
        datatype => 'CertificateValidationStatus',
        base_name => 'validationStatus',
        description => '',
        format => '',
        read_only => '',
            },
    'ra_profile' => {
        datatype => 'SimplifiedRaProfileDto',
        base_name => 'raProfile',
        description => '',
        format => '',
        read_only => '',
            },
    'fingerprint' => {
        datatype => 'string',
        base_name => 'fingerprint',
        description => 'SHA256 fingerprint of the Certificate',
        format => '',
        read_only => '',
            },
    'groups' => {
        datatype => 'ARRAY[GroupDto]',
        base_name => 'groups',
        description => 'Groups associated to the Certificate',
        format => '',
        read_only => '',
            },
    'owner' => {
        datatype => 'string',
        base_name => 'owner',
        description => 'Certificate Owner',
        format => '',
        read_only => '',
            },
    'owner_uuid' => {
        datatype => 'string',
        base_name => 'ownerUuid',
        description => 'Certificate Owner UUID',
        format => '',
        read_only => '',
            },
    'certificate_type' => {
        datatype => 'CertificateType',
        base_name => 'certificateType',
        description => '',
        format => '',
        read_only => '',
            },
    'issuer_serial_number' => {
        datatype => 'string',
        base_name => 'issuerSerialNumber',
        description => 'Serial number of the issuer',
        format => '',
        read_only => '',
            },
    'compliance_status' => {
        datatype => 'ComplianceStatus',
        base_name => 'complianceStatus',
        description => '',
        format => '',
        read_only => '',
            },
    'issuer_certificate_uuid' => {
        datatype => 'string',
        base_name => 'issuerCertificateUuid',
        description => 'UUID of the issuer certificate',
        format => '',
        read_only => '',
            },
    'private_key_availability' => {
        datatype => 'boolean',
        base_name => 'privateKeyAvailability',
        description => 'Private Key Availability',
        format => '',
        read_only => '',
            },
    'trusted_ca' => {
        datatype => 'boolean',
        base_name => 'trustedCa',
        description => 'Indicator whether CA is marked as trusted, set to null if certificate is not CA',
        format => '',
        read_only => '',
            },
    'extended_key_usage' => {
        datatype => 'ARRAY[string]',
        base_name => 'extendedKeyUsage',
        description => 'Extended key usages',
        format => '',
        read_only => '',
            },
    'key_usage' => {
        datatype => 'ARRAY[string]',
        base_name => 'keyUsage',
        description => 'Key usages',
        format => '',
        read_only => '',
            },
    'subject_type' => {
        datatype => 'CertificateSubjectType',
        base_name => 'subjectType',
        description => '',
        format => '',
        read_only => '',
            },
    'metadata' => {
        datatype => 'ARRAY[MetadataResponseDto]',
        base_name => 'metadata',
        description => 'Certificate metadata',
        format => '',
        read_only => '',
            },
    'certificate_content' => {
        datatype => 'string',
        base_name => 'certificateContent',
        description => 'Base64 encoded Certificate content',
        format => '',
        read_only => '',
            },
    'subject_alternative_names' => {
        datatype => 'HASH[string,object]',
        base_name => 'subjectAlternativeNames',
        description => 'Subject alternative names',
        format => '',
        read_only => '',
            },
    'locations' => {
        datatype => 'ARRAY[LocationDto]',
        base_name => 'locations',
        description => 'Locations associated to the Certificate',
        format => '',
        read_only => '',
            },
    'non_compliant_rules' => {
        datatype => 'ARRAY[CertificateComplianceResultDto]',
        base_name => 'nonCompliantRules',
        description => 'Certificate compliance check result',
        format => '',
        read_only => '',
            },
    'custom_attributes' => {
        datatype => 'ARRAY[ResponseAttributeDto]',
        base_name => 'customAttributes',
        description => 'List of Custom Attributes',
        format => '',
        read_only => '',
            },
    'key' => {
        datatype => 'KeyDto',
        base_name => 'key',
        description => '',
        format => '',
        read_only => '',
            },
    'certificate_request' => {
        datatype => 'CertificateRequestDto',
        base_name => 'certificateRequest',
        description => '',
        format => '',
        read_only => '',
            },
    'source_certificate_uuid' => {
        datatype => 'string',
        base_name => 'sourceCertificateUuid',
        description => 'Source certificate UUID',
        format => '',
        read_only => '',
            },
    'issue_attributes' => {
        datatype => 'ARRAY[ResponseAttributeDto]',
        base_name => 'issueAttributes',
        description => 'List of issue attributes',
        format => '',
        read_only => '',
            },
    'revoke_attributes' => {
        datatype => 'ARRAY[ResponseAttributeDto]',
        base_name => 'revokeAttributes',
        description => 'List of revoke attributes',
        format => '',
        read_only => '',
            },
    'related_certificates' => {
        datatype => 'ARRAY[CertificateDto]',
        base_name => 'relatedCertificates',
        description => 'List of related certificates',
        format => '',
        read_only => '',
            },
    'protocol_info' => {
        datatype => 'CertificateProtocolDto',
        base_name => 'protocolInfo',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'uuid' => 'string',
    'common_name' => 'string',
    'serial_number' => 'string',
    'issuer_common_name' => 'string',
    'issuer_dn' => 'string',
    'subject_dn' => 'string',
    'not_before' => 'DATE_TIME',
    'not_after' => 'DATE_TIME',
    'public_key_algorithm' => 'string',
    'signature_algorithm' => 'string',
    'key_size' => 'int',
    'state' => 'CertificateState',
    'validation_status' => 'CertificateValidationStatus',
    'ra_profile' => 'SimplifiedRaProfileDto',
    'fingerprint' => 'string',
    'groups' => 'ARRAY[GroupDto]',
    'owner' => 'string',
    'owner_uuid' => 'string',
    'certificate_type' => 'CertificateType',
    'issuer_serial_number' => 'string',
    'compliance_status' => 'ComplianceStatus',
    'issuer_certificate_uuid' => 'string',
    'private_key_availability' => 'boolean',
    'trusted_ca' => 'boolean',
    'extended_key_usage' => 'ARRAY[string]',
    'key_usage' => 'ARRAY[string]',
    'subject_type' => 'CertificateSubjectType',
    'metadata' => 'ARRAY[MetadataResponseDto]',
    'certificate_content' => 'string',
    'subject_alternative_names' => 'HASH[string,object]',
    'locations' => 'ARRAY[LocationDto]',
    'non_compliant_rules' => 'ARRAY[CertificateComplianceResultDto]',
    'custom_attributes' => 'ARRAY[ResponseAttributeDto]',
    'key' => 'KeyDto',
    'certificate_request' => 'CertificateRequestDto',
    'source_certificate_uuid' => 'string',
    'issue_attributes' => 'ARRAY[ResponseAttributeDto]',
    'revoke_attributes' => 'ARRAY[ResponseAttributeDto]',
    'related_certificates' => 'ARRAY[CertificateDto]',
    'protocol_info' => 'CertificateProtocolDto'
} );

__PACKAGE__->attribute_map( {
    'uuid' => 'uuid',
    'common_name' => 'commonName',
    'serial_number' => 'serialNumber',
    'issuer_common_name' => 'issuerCommonName',
    'issuer_dn' => 'issuerDn',
    'subject_dn' => 'subjectDn',
    'not_before' => 'notBefore',
    'not_after' => 'notAfter',
    'public_key_algorithm' => 'publicKeyAlgorithm',
    'signature_algorithm' => 'signatureAlgorithm',
    'key_size' => 'keySize',
    'state' => 'state',
    'validation_status' => 'validationStatus',
    'ra_profile' => 'raProfile',
    'fingerprint' => 'fingerprint',
    'groups' => 'groups',
    'owner' => 'owner',
    'owner_uuid' => 'ownerUuid',
    'certificate_type' => 'certificateType',
    'issuer_serial_number' => 'issuerSerialNumber',
    'compliance_status' => 'complianceStatus',
    'issuer_certificate_uuid' => 'issuerCertificateUuid',
    'private_key_availability' => 'privateKeyAvailability',
    'trusted_ca' => 'trustedCa',
    'extended_key_usage' => 'extendedKeyUsage',
    'key_usage' => 'keyUsage',
    'subject_type' => 'subjectType',
    'metadata' => 'metadata',
    'certificate_content' => 'certificateContent',
    'subject_alternative_names' => 'subjectAlternativeNames',
    'locations' => 'locations',
    'non_compliant_rules' => 'nonCompliantRules',
    'custom_attributes' => 'customAttributes',
    'key' => 'key',
    'certificate_request' => 'certificateRequest',
    'source_certificate_uuid' => 'sourceCertificateUuid',
    'issue_attributes' => 'issueAttributes',
    'revoke_attributes' => 'revokeAttributes',
    'related_certificates' => 'relatedCertificates',
    'protocol_info' => 'protocolInfo'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
