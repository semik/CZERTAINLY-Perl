=begin comment

CZERTAINLY Core API

REST API for CZERTAINLY Core

The version of the OpenAPI document: 2.13.2-SNAPSHOT
Contact: info@czertainly.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package CZERTAINLY::WorkflowRulesManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use CZERTAINLY::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'CZERTAINLY::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = CZERTAINLY::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_condition
#
# Create Condition
#
# @param ConditionRequestDto $condition_request_dto  (required)
{
    my $params = {
    'condition_request_dto' => {
        data_type => 'ConditionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_condition' } = {
        summary => 'Create Condition',
        params => $params,
        returns => 'ConditionDto',
        };
}
# @return ConditionDto
#
sub create_condition {
    my ($self, %args) = @_;

    # verify the required parameter 'condition_request_dto' is set
    unless (exists $args{'condition_request_dto'}) {
      croak("Missing the required parameter 'condition_request_dto' when calling create_condition");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/conditions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'condition_request_dto'}) {
        $_body_data = $args{'condition_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConditionDto', $response);
    return $_response_object;
}

#
# create_rule
#
# Create Rule
#
# @param RuleRequestDto $rule_request_dto  (required)
{
    my $params = {
    'rule_request_dto' => {
        data_type => 'RuleRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_rule' } = {
        summary => 'Create Rule',
        params => $params,
        returns => 'RuleDetailDto',
        };
}
# @return RuleDetailDto
#
sub create_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'rule_request_dto' is set
    unless (exists $args{'rule_request_dto'}) {
      croak("Missing the required parameter 'rule_request_dto' when calling create_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/rules';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'rule_request_dto'}) {
        $_body_data = $args{'rule_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RuleDetailDto', $response);
    return $_response_object;
}

#
# delete_condition
#
# Delete Condition
#
# @param string $condition_uuid Condition UUID (required)
{
    my $params = {
    'condition_uuid' => {
        data_type => 'string',
        description => 'Condition UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_condition' } = {
        summary => 'Delete Condition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_condition {
    my ($self, %args) = @_;

    # verify the required parameter 'condition_uuid' is set
    unless (exists $args{'condition_uuid'}) {
      croak("Missing the required parameter 'condition_uuid' when calling delete_condition");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/conditions/{conditionUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'condition_uuid'}) {
        my $_base_variable = "{" . "conditionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'condition_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_rule
#
# Delete Rule
#
# @param string $rule_uuid Rule UUID (required)
{
    my $params = {
    'rule_uuid' => {
        data_type => 'string',
        description => 'Rule UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_rule' } = {
        summary => 'Delete Rule',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'rule_uuid' is set
    unless (exists $args{'rule_uuid'}) {
      croak("Missing the required parameter 'rule_uuid' when calling delete_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/rules/{ruleUuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'rule_uuid'}) {
        my $_base_variable = "{" . "ruleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rule_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_condition
#
# Get Condition details
#
# @param string $condition_uuid Condition UUID (required)
{
    my $params = {
    'condition_uuid' => {
        data_type => 'string',
        description => 'Condition UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_condition' } = {
        summary => 'Get Condition details',
        params => $params,
        returns => 'ConditionDto',
        };
}
# @return ConditionDto
#
sub get_condition {
    my ($self, %args) = @_;

    # verify the required parameter 'condition_uuid' is set
    unless (exists $args{'condition_uuid'}) {
      croak("Missing the required parameter 'condition_uuid' when calling get_condition");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/conditions/{conditionUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'condition_uuid'}) {
        my $_base_variable = "{" . "conditionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'condition_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConditionDto', $response);
    return $_response_object;
}

#
# get_rule
#
# Get Rule details
#
# @param string $rule_uuid Rule UUID (required)
{
    my $params = {
    'rule_uuid' => {
        data_type => 'string',
        description => 'Rule UUID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_rule' } = {
        summary => 'Get Rule details',
        params => $params,
        returns => 'RuleDetailDto',
        };
}
# @return RuleDetailDto
#
sub get_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'rule_uuid' is set
    unless (exists $args{'rule_uuid'}) {
      croak("Missing the required parameter 'rule_uuid' when calling get_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/rules/{ruleUuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'rule_uuid'}) {
        my $_base_variable = "{" . "ruleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rule_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RuleDetailDto', $response);
    return $_response_object;
}

#
# list_conditions
#
# List Conditions
#
# @param Resource $resource  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_conditions' } = {
        summary => 'List Conditions',
        params => $params,
        returns => 'ARRAY[ConditionDto]',
        };
}
# @return ARRAY[ConditionDto]
#
sub list_conditions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/workflows/conditions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ConditionDto]', $response);
    return $_response_object;
}

#
# list_rules
#
# List Rules
#
# @param Resource $resource  (optional)
{
    my $params = {
    'resource' => {
        data_type => 'Resource',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_rules' } = {
        summary => 'List Rules',
        params => $params,
        returns => 'ARRAY[RuleDto]',
        };
}
# @return ARRAY[RuleDto]
#
sub list_rules {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/workflows/rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'resource'}) {
        $query_params->{'resource'} = $self->{api_client}->to_query_value($args{'resource'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RuleDto]', $response);
    return $_response_object;
}

#
# update_condition
#
# Update Condition
#
# @param string $condition_uuid Condition UUID (required)
# @param UpdateConditionRequestDto $update_condition_request_dto  (required)
{
    my $params = {
    'condition_uuid' => {
        data_type => 'string',
        description => 'Condition UUID',
        required => '1',
    },
    'update_condition_request_dto' => {
        data_type => 'UpdateConditionRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_condition' } = {
        summary => 'Update Condition',
        params => $params,
        returns => 'ConditionDto',
        };
}
# @return ConditionDto
#
sub update_condition {
    my ($self, %args) = @_;

    # verify the required parameter 'condition_uuid' is set
    unless (exists $args{'condition_uuid'}) {
      croak("Missing the required parameter 'condition_uuid' when calling update_condition");
    }

    # verify the required parameter 'update_condition_request_dto' is set
    unless (exists $args{'update_condition_request_dto'}) {
      croak("Missing the required parameter 'update_condition_request_dto' when calling update_condition");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/conditions/{conditionUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'condition_uuid'}) {
        my $_base_variable = "{" . "conditionUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'condition_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_condition_request_dto'}) {
        $_body_data = $args{'update_condition_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConditionDto', $response);
    return $_response_object;
}

#
# update_rule
#
# Update Rule
#
# @param string $rule_uuid Rule UUID (required)
# @param UpdateRuleRequestDto $update_rule_request_dto  (required)
{
    my $params = {
    'rule_uuid' => {
        data_type => 'string',
        description => 'Rule UUID',
        required => '1',
    },
    'update_rule_request_dto' => {
        data_type => 'UpdateRuleRequestDto',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_rule' } = {
        summary => 'Update Rule',
        params => $params,
        returns => 'RuleDetailDto',
        };
}
# @return RuleDetailDto
#
sub update_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'rule_uuid' is set
    unless (exists $args{'rule_uuid'}) {
      croak("Missing the required parameter 'rule_uuid' when calling update_rule");
    }

    # verify the required parameter 'update_rule_request_dto' is set
    unless (exists $args{'update_rule_request_dto'}) {
      croak("Missing the required parameter 'update_rule_request_dto' when calling update_rule");
    }

    # parse inputs
    my $_resource_path = '/v1/workflows/rules/{ruleUuid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'rule_uuid'}) {
        my $_base_variable = "{" . "ruleUuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rule_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_rule_request_dto'}) {
        $_body_data = $args{'update_rule_request_dto'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RuleDetailDto', $response);
    return $_response_object;
}

1;
